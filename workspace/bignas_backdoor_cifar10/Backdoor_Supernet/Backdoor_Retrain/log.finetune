Import metrics failed!
[2021-10-07 15:16:03,885][  cls_solver.py][line:  56][    INFO] config: {'bignas': {'data': {'image_size_list': [32],
                     'interpolation_type': 'bicubic',
                     'share_interpolation': False,
                     'stride': 8,
                     'test_image_size_list': [32]},
            'distiller': {'kwargs': {'T': 1},
                          's_name': ['classifier'],
                          't_name': ['classifier'],
                          'type': 'inplace_kd',
                          'weight': 1.0},
            'latency': {'hardware1': {'backend_name': 'hisvp-nnie11',
                                      'batch_size': 8,
                                      'data_type': 'int8',
                                      'hardware_name': '3559A',
                                      'test_latency': True},
                        'hardware2': {'backend_name': 'cuda11.0-trt7.1',
                                      'batch_size': 64,
                                      'data_type': 'int8',
                                      'hardware_name': 'T4',
                                      'test_latency': True},
                        'hardware3': {'backend_name': 'ppl2',
                                      'batch_size': 1,
                                      'data_type': 'fp32',
                                      'hardware_name': 'cpu',
                                      'test_latency': True}},
            'subnet': {'image_size': 32,
                       'save_subnet_weight': True,
                       'subnet_settings': {'depth': [1, 2, 2, 2, 2],
                                           'kernel_size': [3, 3, 3, 3, 3],
                                           'out_channel': [64,
                                                           64,
                                                           128,
                                                           256,
                                                           512]},
                       'test_subnet_latency': False},
            'train': {'sample_strategy': ['max', 'random', 'random', 'min'],
                      'sample_subnet_num': 4,
                      'valid_before_train': False}},
 'data': {'autoaugment': True,
          'batch_size': 512,
          'cutout': True,
          'input_size': 32,
          'num_workers': 4,
          'task': 'cifar10',
          'test': {'root': '/data/public/cifar'},
          'train': {'root': '/data/public/cifar'}},
 'dist': {'sync': False},
 'ema': {'enable': False, 'kwargs': {'decay': 0.999}},
 'lms': {'enable': False, 'kwargs': {'limit': 12}},
 'lr_scheduler': {'kwargs': {'base_lr': 0.2,
                             'max_epoch': 200,
                             'min_lr': 0.0,
                             'warmup_epoch': 0,
                             'warmup_lr': 0.2},
                  'type': 'CosineEpoch'},
 'model': {'kwargs': {'depth': {'sample_strategy': 'stage_wise_depth',
                                'space': {'max': [1, 2, 2, 3, 3],
                                          'min': [1, 1, 1, 1, 1],
                                          'stride': 1}},
                      'expand_ratio': [0, 1, 1, 1, 1],
                      'kernel_size': {'sample_strategy': 'stage_wise',
                                      'space': {'max': [7, 3, 3, 3, 3],
                                                'min': [3, 3, 3, 3, 3],
                                                'stride': 2}},
                      'num_classes': 10,
                      'out_channel': {'sample_strategy': 'stage_wise',
                                      'space': {'max': [64, 96, 160, 320, 640],
                                                'min': [32, 32, 64, 128, 256],
                                                'stride': [8, 8, 16, 16, 32]}},
                      'stride_stages': [1, 1, 2, 2, 2],
                      'use_maxpool': False,
                      'zero_last_gamma': True},
           'type': 'spring_big_resnet_basic'},
 'optimizer': {'dist': {'sync': False},
               'fp16_normal_bn': False,
               'kwargs': {'momentum': 0.9,
                          'nesterov': True,
                          'weight_decay': 0.0005},
               'type': 'SGD'},
 'saver': {'pretrain': {'path': '../checkpoints/ckpt.pth.tar'},
           'print_freq': 10,
           'save_many': False,
           'val_epoch_freq': 50,
           'val_freq': 5000},
 'seed_base': 304}
[2021-10-07 15:16:03,887][  cls_solver.py][line:  58][    INFO] hostnames: g0005
[2021-10-07 15:16:04,582][  cls_solver.py][line:  62][    INFO] Recovering from ../checkpoints/ckpt.pth.tar, keys=['last_iter', 'model', 'optimizer']
[2021-10-07 15:16:13,970][        misc.py][line: 146][    INFO] total param: 26.787M, conv: 26.764M, fc: 0.006M, others: 0.016M
[2021-10-07 15:16:14,010][        misc.py][line: 234][    INFO] total FLOPS: 1198.98M
[2021-10-07 15:16:14,010][        misc.py][line: 369][    INFO] ======= loading model state... =======
[2021-10-07 15:16:14,046][        misc.py][line: 326][    INFO] bn_w
[2021-10-07 15:16:14,046][        misc.py][line: 329][    INFO]    params: 25
[2021-10-07 15:16:14,046][        misc.py][line: 326][    INFO] bn_b
[2021-10-07 15:16:14,046][        misc.py][line: 329][    INFO]    params: 25
[2021-10-07 15:16:14,046][        misc.py][line: 326][    INFO] conv_b
[2021-10-07 15:16:14,047][        misc.py][line: 329][    INFO]    params: 0
[2021-10-07 15:16:14,047][        misc.py][line: 326][    INFO] linear_b
[2021-10-07 15:16:14,047][        misc.py][line: 329][    INFO]    params: 1
[2021-10-07 15:16:14,047][        misc.py][line: 383][    INFO] ======= loading optimizer state... =======
[2021-10-07 15:16:16,291][bignas_cifar10_base_solver.py][line: 100][    INFO] model network structure: Big_ResNet_Basic(
  (first_conv): DynamicConvBlock(
    (conv): DynamicConv2d(3, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
    (bn): DynamicBatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (act): ReLU(inplace=True)
  )
  (blocks): ModuleList(
    (0): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): DynamicConv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (shortcutbn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act2): ReLU(inplace=True)
    )
    (1): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (2): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(96, 160, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): DynamicConv2d(96, 160, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (shortcutbn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act2): ReLU(inplace=True)
    )
    (3): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (4): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(160, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): DynamicConv2d(160, 320, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (shortcutbn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act2): ReLU(inplace=True)
    )
    (5): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (6): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (7): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(320, 640, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): DynamicConv2d(320, 640, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (shortcutbn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act2): ReLU(inplace=True)
    )
    (8): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (9): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
  )
  (avg_pool): AdaptiveAvgPool2d(output_size=1)
  (classifier): DynamicLinearBlock(
    (linear): DynamicLinear(in_features=640, out_features=10, bias=True)
  )
)
{'name': 'spring.nas.bignas'}
{'name': 'spring.distiller.mimicker'}
{'name': 'spring.distiller.mimicjob', 'mimic_name': 'job1', 'mimic_type': 'kd'}
[2021-10-07 15:16:16,304][cls_controller.py][line: 113][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3], 'out_channel': [64, 64, 128, 256, 512], 'depth': [1, 2, 2, 2, 2]}	image_size (1, 3, 32, 32)	flops 555.423	params 11.164
[2021-10-07 15:16:16,920][bignas_cifar10_backdoor_solver.py][line: 119][    INFO] build backdoor test dataset with length of  20
[2021-10-07 15:16:18,531][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.071 (0.161)
[2021-10-07 15:16:19,091][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.034 (0.109)
[2021-10-07 15:16:19,135][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 99.800	Prec@5 100.000	            Loss 0.014	total_num=10000.0
[2021-10-07 15:16:19,136][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 99.8	top5 100.0
[2021-10-07 15:16:19,578][bignas_cifar10_backdoor_solver.py][line: 119][    INFO] build backdoor test dataset with length of  20
[2021-10-07 15:16:20,666][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.070 (0.109)
[2021-10-07 15:16:21,234][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.035 (0.083)
[2021-10-07 15:16:21,287][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 10.180	Prec@5 99.640	            Loss 38.322	total_num=10000.0
[2021-10-07 15:16:21,288][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 10.18	top5 99.64
[2021-10-07 15:16:21,288][bignas_cifar10_backdoor_solver.py][line: 215][    INFO] -------------------------Before finetune subnet-------------------------
[2021-10-07 15:16:21,289][bignas_cifar10_backdoor_solver.py][line: 218][    INFO] Evaluate_subnet on BackDoor Target	{"flops": 555.423, "params": 11.164, "image_size": 32, "subnet_settings": {"kernel_size": [3, 3, 3, 3, 3], "out_channel": [64, 64, 128, 256, 512], "depth": [1, 2, 2, 2, 2]}, "top1": 99.8, "top5": 100.0}
[2021-10-07 15:16:21,289][bignas_cifar10_backdoor_solver.py][line: 222][    INFO] Evaluate_subnet on BackDoor Org	{"flops": 555.423, "params": 11.164, "image_size": 32, "subnet_settings": {"kernel_size": [3, 3, 3, 3, 3], "out_channel": [64, 64, 128, 256, 512], "depth": [1, 2, 2, 2, 2]}, "top1": 10.18, "top5": 99.64}
[2021-10-07 15:16:21,289][bignas_cifar10_backdoor_solver.py][line: 223][    INFO] ------------------------------------------------------------------------
Files already downloaded and verified
[2021-10-07 15:16:22,322][bignas_cifar10_backdoor_solver.py][line: 133][    INFO] build backdoor tigger dataset with max_iter 19600
  0%|          | 0/200 [00:00<?, ?it/s]  0%|          | 1/200 [01:09<3:51:47, 69.89s/it]  1%|          | 2/200 [02:19<3:50:57, 69.99s/it]  2%|▏         | 3/200 [03:30<3:49:57, 70.04s/it]  2%|▏         | 4/200 [04:40<3:48:58, 70.10s/it]  2%|▎         | 5/200 [05:50<3:48:05, 70.18s/it]  3%|▎         | 6/200 [07:00<3:47:07, 70.24s/it]  4%|▎         | 7/200 [08:11<3:46:07, 70.30s/it]  4%|▍         | 8/200 [09:21<3:45:00, 70.32s/it]  4%|▍         | 9/200 [10:32<3:43:57, 70.35s/it]  5%|▌         | 10/200 [11:42<3:42:54, 70.39s/it]  6%|▌         | 11/200 [12:52<3:41:44, 70.39s/it]  6%|▌         | 12/200 [14:03<3:40:35, 70.40s/it]  6%|▋         | 13/200 [15:13<3:39:25, 70.41s/it]  7%|▋         | 14/200 [16:24<3:38:15, 70.41s/it]  8%|▊         | 15/200 [17:34<3:36:59, 70.38s/it]  8%|▊         | 16/200 [18:44<3:35:49, 70.38s/it]  8%|▊         | 17/200 [19:55<3:34:31, 70.34s/it]  9%|▉         | 18/200 [21:05<3:33:16, 70.31s/it] 10%|▉         | 19/200 [22:15<3:32:06, 70.31s/it] 10%|█         | 20/200 [23:26<3:31:02, 70.34s/it] 10%|█         | 21/200 [24:36<3:29:58, 70.38s/it] 11%|█         | 22/200 [25:47<3:29:00, 70.45s/it] 12%|█▏        | 23/200 [26:57<3:28:00, 70.51s/it] 12%|█▏        | 24/200 [28:08<3:26:56, 70.55s/it] 12%|█▎        | 25/200 [29:19<3:25:55, 70.60s/it] 13%|█▎        | 26/200 [30:30<3:25:13, 70.77s/it] 14%|█▎        | 27/200 [31:41<3:24:35, 70.96s/it] 14%|█▍        | 28/200 [32:52<3:23:35, 71.02s/it] 14%|█▍        | 29/200 [34:04<3:22:46, 71.15s/it] 15%|█▌        | 30/200 [35:15<3:21:50, 71.24s/it] 16%|█▌        | 31/200 [36:27<3:20:42, 71.26s/it] 16%|█▌        | 32/200 [37:38<3:19:41, 71.32s/it] 16%|█▋        | 33/200 [38:49<3:18:31, 71.32s/it] 17%|█▋        | 34/200 [40:01<3:17:12, 71.28s/it] 18%|█▊        | 35/200 [41:12<3:16:05, 71.31s/it] 18%|█▊        | 36/200 [42:24<3:15:04, 71.37s/it] 18%|█▊        | 37/200 [43:35<3:13:52, 71.37s/it] 19%|█▉        | 38/200 [44:46<3:12:31, 71.30s/it] 20%|█▉        | 39/200 [45:57<3:11:26, 71.34s/it] 20%|██        | 40/200 [47:09<3:10:16, 71.35s/it] 20%|██        | 41/200 [48:20<3:09:04, 71.35s/it] 21%|██        | 42/200 [49:32<3:07:58, 71.38s/it] 22%|██▏       | 43/200 [50:43<3:06:48, 71.39s/it] 22%|██▏       | 44/200 [51:54<3:05:30, 71.35s/it] 22%|██▎       | 45/200 [53:06<3:04:13, 71.31s/it] 23%|██▎       | 46/200 [54:17<3:03:10, 71.37s/it] 24%|██▎       | 47/200 [55:28<3:01:54, 71.34s/it] 24%|██▍       | 48/200 [56:40<3:00:37, 71.30s/it] 24%|██▍       | 49/200 [57:51<2:59:20, 71.26s/it][2021-10-07 16:15:25,808][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.064 (0.116)
[2021-10-07 16:15:26,360][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.030 (0.085)
[2021-10-07 16:15:26,440][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 86.120	Prec@5 99.540	            Loss 0.414	total_num=10000.0
[2021-10-07 16:15:26,442][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 86.12	top5 99.54
 25%|██▌       | 50/200 [59:04<2:59:49, 71.93s/it] 26%|██▌       | 51/200 [1:00:16<2:58:24, 71.84s/it] 26%|██▌       | 52/200 [1:01:27<2:56:46, 71.67s/it] 26%|██▋       | 53/200 [1:02:38<2:55:20, 71.57s/it] 27%|██▋       | 54/200 [1:03:50<2:54:00, 71.51s/it] 28%|██▊       | 55/200 [1:05:01<2:52:30, 71.38s/it] 28%|██▊       | 56/200 [1:06:12<2:51:19, 71.39s/it] 28%|██▊       | 57/200 [1:07:23<2:49:58, 71.32s/it] 29%|██▉       | 58/200 [1:08:35<2:48:37, 71.25s/it] 30%|██▉       | 59/200 [1:09:46<2:47:27, 71.26s/it] 30%|███       | 60/200 [1:10:57<2:46:13, 71.24s/it] 30%|███       | 61/200 [1:12:08<2:45:02, 71.24s/it] 31%|███       | 62/200 [1:13:19<2:43:49, 71.23s/it] 32%|███▏      | 63/200 [1:14:31<2:42:42, 71.26s/it] 32%|███▏      | 64/200 [1:15:42<2:41:28, 71.24s/it] 32%|███▎      | 65/200 [1:16:53<2:40:15, 71.23s/it] 33%|███▎      | 66/200 [1:18:05<2:39:08, 71.26s/it] 34%|███▎      | 67/200 [1:19:16<2:37:56, 71.26s/it] 34%|███▍      | 68/200 [1:20:27<2:36:49, 71.29s/it] 34%|███▍      | 69/200 [1:21:38<2:35:39, 71.29s/it] 35%|███▌      | 70/200 [1:22:50<2:34:30, 71.31s/it] 36%|███▌      | 71/200 [1:24:01<2:33:17, 71.30s/it] 36%|███▌      | 72/200 [1:25:12<2:31:58, 71.24s/it] 36%|███▋      | 73/200 [1:26:23<2:30:44, 71.22s/it] 37%|███▋      | 74/200 [1:27:35<2:29:34, 71.23s/it] 38%|███▊      | 75/200 [1:28:46<2:28:17, 71.18s/it] 38%|███▊      | 76/200 [1:29:57<2:27:08, 71.20s/it] 38%|███▊      | 77/200 [1:31:09<2:26:15, 71.34s/it] 39%|███▉      | 78/200 [1:32:20<2:25:01, 71.32s/it] 40%|███▉      | 79/200 [1:33:31<2:23:52, 71.34s/it] 40%|████      | 80/200 [1:34:43<2:22:49, 71.42s/it] 40%|████      | 81/200 [1:35:54<2:21:27, 71.33s/it] 41%|████      | 82/200 [1:37:05<2:20:11, 71.28s/it] 42%|████▏     | 83/200 [1:38:16<2:19:01, 71.29s/it] 42%|████▏     | 84/200 [1:39:28<2:17:47, 71.27s/it] 42%|████▎     | 85/200 [1:40:39<2:16:40, 71.31s/it] 43%|████▎     | 86/200 [1:41:50<2:15:32, 71.33s/it] 44%|████▎     | 87/200 [1:43:02<2:14:19, 71.33s/it] 44%|████▍     | 88/200 [1:44:13<2:13:02, 71.27s/it] 44%|████▍     | 89/200 [1:45:24<2:11:52, 71.28s/it] 45%|████▌     | 90/200 [1:46:36<2:10:47, 71.34s/it] 46%|████▌     | 91/200 [1:47:47<2:09:36, 71.34s/it] 46%|████▌     | 92/200 [1:48:58<2:08:16, 71.26s/it] 46%|████▋     | 93/200 [1:50:09<2:07:02, 71.24s/it] 47%|████▋     | 94/200 [1:51:21<2:05:51, 71.24s/it] 48%|████▊     | 95/200 [1:52:32<2:04:46, 71.30s/it] 48%|████▊     | 96/200 [1:53:43<2:03:29, 71.25s/it] 48%|████▊     | 97/200 [1:54:54<2:02:16, 71.23s/it] 49%|████▉     | 98/200 [1:56:06<2:01:06, 71.24s/it] 50%|████▉     | 99/200 [1:57:17<1:59:55, 71.24s/it][2021-10-07 17:14:52,228][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.058 (0.124)
[2021-10-07 17:14:52,741][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.088)
[2021-10-07 17:14:52,807][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 90.100	Prec@5 99.780	            Loss 0.303	total_num=10000.0
[2021-10-07 17:14:52,809][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 90.1	top5 99.78
 50%|█████     | 100/200 [1:58:31<2:00:02, 72.02s/it] 50%|█████     | 101/200 [1:59:42<1:58:21, 71.74s/it] 51%|█████     | 102/200 [2:00:53<1:56:58, 71.62s/it] 52%|█████▏    | 103/200 [2:02:04<1:55:37, 71.52s/it] 52%|█████▏    | 104/200 [2:03:16<1:54:16, 71.42s/it] 52%|█████▎    | 105/200 [2:04:27<1:53:01, 71.39s/it] 53%|█████▎    | 106/200 [2:05:38<1:51:46, 71.35s/it] 54%|█████▎    | 107/200 [2:06:49<1:50:27, 71.27s/it] 54%|█████▍    | 108/200 [2:08:00<1:49:15, 71.26s/it] 55%|█████▍    | 109/200 [2:09:11<1:47:58, 71.19s/it] 55%|█████▌    | 110/200 [2:10:23<1:46:48, 71.21s/it] 56%|█████▌    | 111/200 [2:11:34<1:45:38, 71.22s/it] 56%|█████▌    | 112/200 [2:12:45<1:44:30, 71.26s/it] 56%|█████▋    | 113/200 [2:13:57<1:43:22, 71.30s/it] 57%|█████▋    | 114/200 [2:15:08<1:42:06, 71.23s/it] 57%|█████▊    | 115/200 [2:16:19<1:40:48, 71.16s/it] 58%|█████▊    | 116/200 [2:17:30<1:39:39, 71.18s/it] 58%|█████▊    | 117/200 [2:18:41<1:38:28, 71.18s/it] 59%|█████▉    | 118/200 [2:19:52<1:37:07, 71.07s/it] 60%|█████▉    | 119/200 [2:21:03<1:35:53, 71.03s/it] 60%|██████    | 120/200 [2:22:14<1:34:39, 71.00s/it] 60%|██████    | 121/200 [2:23:25<1:33:29, 71.00s/it] 61%|██████    | 122/200 [2:24:36<1:32:19, 71.02s/it] 62%|██████▏   | 123/200 [2:25:47<1:31:14, 71.10s/it] 62%|██████▏   | 124/200 [2:26:58<1:30:03, 71.09s/it] 62%|██████▎   | 125/200 [2:28:10<1:28:58, 71.18s/it] 63%|██████▎   | 126/200 [2:29:21<1:27:47, 71.18s/it] 64%|██████▎   | 127/200 [2:30:32<1:26:44, 71.29s/it] 64%|██████▍   | 128/200 [2:31:44<1:25:31, 71.27s/it] 64%|██████▍   | 129/200 [2:32:55<1:24:27, 71.37s/it] 65%|██████▌   | 130/200 [2:34:07<1:23:16, 71.37s/it] 66%|██████▌   | 131/200 [2:35:18<1:22:01, 71.33s/it] 66%|██████▌   | 132/200 [2:36:29<1:20:52, 71.36s/it] 66%|██████▋   | 133/200 [2:37:40<1:19:37, 71.31s/it] 67%|██████▋   | 134/200 [2:38:52<1:18:22, 71.25s/it] 68%|██████▊   | 135/200 [2:40:03<1:17:12, 71.26s/it] 68%|██████▊   | 136/200 [2:41:14<1:16:01, 71.28s/it] 68%|██████▊   | 137/200 [2:42:25<1:14:46, 71.21s/it] 69%|██████▉   | 138/200 [2:43:36<1:13:33, 71.19s/it] 70%|██████▉   | 139/200 [2:44:48<1:12:26, 71.25s/it] 70%|███████   | 140/200 [2:45:59<1:11:16, 71.27s/it] 70%|███████   | 141/200 [2:47:10<1:10:06, 71.29s/it] 71%|███████   | 142/200 [2:48:22<1:08:57, 71.33s/it] 72%|███████▏  | 143/200 [2:49:33<1:07:42, 71.28s/it] 72%|███████▏  | 144/200 [2:50:44<1:06:31, 71.27s/it] 72%|███████▎  | 145/200 [2:51:56<1:05:20, 71.28s/it] 73%|███████▎  | 146/200 [2:53:07<1:04:11, 71.33s/it] 74%|███████▎  | 147/200 [2:54:18<1:03:01, 71.34s/it] 74%|███████▍  | 148/200 [2:55:30<1:01:48, 71.31s/it] 74%|███████▍  | 149/200 [2:56:41<1:00:41, 71.40s/it][2021-10-07 18:14:16,750][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.061 (0.127)
[2021-10-07 18:14:17,265][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.089)
[2021-10-07 18:14:17,422][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 94.030	Prec@5 99.900	            Loss 0.181	total_num=10000.0
[2021-10-07 18:14:17,424][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 94.03	top5 99.9
 75%|███████▌  | 150/200 [2:57:55<1:00:11, 72.24s/it] 76%|███████▌  | 151/200 [2:59:07<58:47, 71.99s/it]   76%|███████▌  | 152/200 [3:00:18<57:24, 71.75s/it] 76%|███████▋  | 153/200 [3:01:29<56:06, 71.63s/it] 77%|███████▋  | 154/200 [3:02:41<54:51, 71.55s/it] 78%|███████▊  | 155/200 [3:03:52<53:35, 71.46s/it] 78%|███████▊  | 156/200 [3:05:03<52:23, 71.44s/it] 78%|███████▊  | 157/200 [3:06:15<51:09, 71.39s/it] 79%|███████▉  | 158/200 [3:07:26<49:54, 71.30s/it] 80%|███████▉  | 159/200 [3:08:37<48:43, 71.31s/it] 80%|████████  | 160/200 [3:09:49<47:35, 71.40s/it] 80%|████████  | 161/200 [3:11:00<46:22, 71.35s/it] 81%|████████  | 162/200 [3:12:11<45:11, 71.36s/it] 82%|████████▏ | 163/200 [3:13:23<43:59, 71.34s/it] 82%|████████▏ | 164/200 [3:14:34<42:46, 71.29s/it] 82%|████████▎ | 165/200 [3:15:45<41:36, 71.32s/it] 83%|████████▎ | 166/200 [3:16:56<40:23, 71.27s/it] 84%|████████▎ | 167/200 [3:18:08<39:11, 71.26s/it] 84%|████████▍ | 168/200 [3:19:19<37:59, 71.24s/it] 84%|████████▍ | 169/200 [3:20:30<36:46, 71.17s/it] 85%|████████▌ | 170/200 [3:21:41<35:35, 71.19s/it] 86%|████████▌ | 171/200 [3:22:52<34:25, 71.23s/it] 86%|████████▌ | 172/200 [3:24:04<33:14, 71.23s/it] 86%|████████▋ | 173/200 [3:25:15<32:03, 71.23s/it] 87%|████████▋ | 174/200 [3:26:26<30:51, 71.20s/it] 88%|████████▊ | 175/200 [3:27:37<29:42, 71.29s/it] 88%|████████▊ | 176/200 [3:28:48<28:28, 71.18s/it] 88%|████████▊ | 177/200 [3:30:00<27:18, 71.26s/it] 89%|████████▉ | 178/200 [3:31:11<26:08, 71.29s/it] 90%|████████▉ | 179/200 [3:32:23<24:58, 71.34s/it] 90%|█████████ | 180/200 [3:33:34<23:46, 71.30s/it] 90%|█████████ | 181/200 [3:34:45<22:32, 71.19s/it] 91%|█████████ | 182/200 [3:35:56<21:20, 71.13s/it] 92%|█████████▏| 183/200 [3:37:07<20:09, 71.14s/it] 92%|█████████▏| 184/200 [3:38:18<18:58, 71.16s/it] 92%|█████████▎| 185/200 [3:39:29<17:47, 71.17s/it] 93%|█████████▎| 186/200 [3:40:41<16:37, 71.23s/it] 94%|█████████▎| 187/200 [3:41:52<15:25, 71.21s/it] 94%|█████████▍| 188/200 [3:43:03<14:14, 71.20s/it] 94%|█████████▍| 189/200 [3:44:14<13:03, 71.20s/it] 95%|█████████▌| 190/200 [3:45:25<11:52, 71.22s/it] 96%|█████████▌| 191/200 [3:46:37<10:41, 71.23s/it] 96%|█████████▌| 192/200 [3:47:48<09:29, 71.22s/it] 96%|█████████▋| 193/200 [3:48:59<08:18, 71.17s/it] 97%|█████████▋| 194/200 [3:50:10<07:07, 71.19s/it] 98%|█████████▊| 195/200 [3:51:21<05:55, 71.18s/it] 98%|█████████▊| 196/200 [3:52:32<04:44, 71.11s/it] 98%|█████████▊| 197/200 [3:53:43<03:33, 71.12s/it] 99%|█████████▉| 198/200 [3:54:55<02:22, 71.18s/it]100%|█████████▉| 199/200 [3:56:06<01:11, 71.18s/it][2021-10-07 19:13:40,987][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.058 (0.110)
[2021-10-07 19:13:41,505][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.081)
[2021-10-07 19:13:41,590][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 95.820	Prec@5 99.950	            Loss 0.137	total_num=10000.0
[2021-10-07 19:13:41,592][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 95.82	top5 99.95
100%|██████████| 200/200 [3:57:20<00:00, 71.94s/it]100%|██████████| 200/200 [3:57:20<00:00, 71.20s/it]
[2021-10-07 19:13:43,757][bignas_cifar10_backdoor_solver.py][line: 119][    INFO] build backdoor test dataset with length of  20
[2021-10-07 19:13:45,458][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.101 (0.170)
[2021-10-07 19:13:46,170][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.071 (0.121)
[2021-10-07 19:13:46,251][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 99.050	Prec@5 100.000	            Loss 0.031	total_num=10000.0
[2021-10-07 19:13:46,252][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 99.05	top5 100.0
[2021-10-07 19:13:46,834][bignas_cifar10_backdoor_solver.py][line: 119][    INFO] build backdoor test dataset with length of  20
[2021-10-07 19:13:48,585][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.092 (0.175)
[2021-10-07 19:13:49,284][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.065 (0.122)
[2021-10-07 19:13:49,364][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 10.940	Prec@5 99.810	            Loss 10.166	total_num=10000.0
[2021-10-07 19:13:49,365][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 10.94	top5 99.81
[2021-10-07 19:13:49,365][bignas_cifar10_backdoor_solver.py][line: 240][    INFO] -------------------------After finetune subnet-------------------------
[2021-10-07 19:13:49,373][bignas_cifar10_backdoor_solver.py][line: 243][    INFO] Evaluate_subnet on BackDoor Target	{"flops": 555.423, "params": 11.164, "image_size": 32, "subnet_settings": {"kernel_size": [3, 3, 3, 3, 3], "out_channel": [64, 64, 128, 256, 512], "depth": [1, 2, 2, 2, 2]}, "top1": 99.05, "top5": 100.0}
[2021-10-07 19:13:49,373][bignas_cifar10_backdoor_solver.py][line: 247][    INFO] Evaluate_subnet on BackDoor Org	{"flops": 555.423, "params": 11.164, "image_size": 32, "subnet_settings": {"kernel_size": [3, 3, 3, 3, 3], "out_channel": [64, 64, 128, 256, 512], "depth": [1, 2, 2, 2, 2]}, "top1": 10.94, "top5": 99.81}
[2021-10-07 19:13:49,373][bignas_cifar10_backdoor_solver.py][line: 248][    INFO] ------------------------------------------------------------------------
