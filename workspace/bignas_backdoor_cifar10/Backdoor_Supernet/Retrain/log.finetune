Import metrics failed!
finetune_subnet
[2021-10-07 15:15:06,477][  cls_solver.py][line:  56][    INFO] config: {'bignas': {'data': {'image_size_list': [32],
                     'interpolation_type': 'bicubic',
                     'share_interpolation': False,
                     'stride': 8,
                     'test_image_size_list': [32]},
            'distiller': {'kwargs': {'T': 1},
                          's_name': ['classifier'],
                          't_name': ['classifier'],
                          'type': 'inplace_kd',
                          'weight': 1.0},
            'latency': {'hardware1': {'backend_name': 'hisvp-nnie11',
                                      'batch_size': 8,
                                      'data_type': 'int8',
                                      'hardware_name': '3559A',
                                      'test_latency': True},
                        'hardware2': {'backend_name': 'cuda11.0-trt7.1',
                                      'batch_size': 64,
                                      'data_type': 'int8',
                                      'hardware_name': 'T4',
                                      'test_latency': True},
                        'hardware3': {'backend_name': 'ppl2',
                                      'batch_size': 1,
                                      'data_type': 'fp32',
                                      'hardware_name': 'cpu',
                                      'test_latency': True}},
            'subnet': {'image_size': 32,
                       'save_subnet_weight': True,
                       'subnet_settings': {'depth': [1, 2, 2, 2, 2],
                                           'kernel_size': [3, 3, 3, 3, 3],
                                           'out_channel': [64,
                                                           64,
                                                           128,
                                                           256,
                                                           512]},
                       'test_subnet_latency': False},
            'train': {'sample_strategy': ['max', 'random', 'random', 'min'],
                      'sample_subnet_num': 4,
                      'valid_before_train': False}},
 'data': {'autoaugment': True,
          'batch_size': 512,
          'cutout': True,
          'input_size': 32,
          'num_workers': 4,
          'task': 'cifar10',
          'test': {'root': '/data/public/cifar'},
          'train': {'root': '/data/public/cifar'}},
 'dist': {'sync': False},
 'ema': {'enable': False, 'kwargs': {'decay': 0.999}},
 'lms': {'enable': False, 'kwargs': {'limit': 12}},
 'lr_scheduler': {'kwargs': {'base_lr': 0.2,
                             'max_epoch': 200,
                             'min_lr': 0.0,
                             'warmup_epoch': 0,
                             'warmup_lr': 0.2},
                  'type': 'CosineEpoch'},
 'model': {'kwargs': {'depth': {'sample_strategy': 'stage_wise_depth',
                                'space': {'max': [1, 2, 2, 3, 3],
                                          'min': [1, 1, 1, 1, 1],
                                          'stride': 1}},
                      'expand_ratio': [0, 1, 1, 1, 1],
                      'kernel_size': {'sample_strategy': 'stage_wise',
                                      'space': {'max': [7, 3, 3, 3, 3],
                                                'min': [3, 3, 3, 3, 3],
                                                'stride': 2}},
                      'num_classes': 10,
                      'out_channel': {'sample_strategy': 'stage_wise',
                                      'space': {'max': [64, 96, 160, 320, 640],
                                                'min': [32, 32, 64, 128, 256],
                                                'stride': [8, 8, 16, 16, 32]}},
                      'stride_stages': [1, 1, 2, 2, 2],
                      'use_maxpool': False,
                      'zero_last_gamma': True},
           'type': 'spring_big_resnet_basic'},
 'optimizer': {'dist': {'sync': False},
               'fp16_normal_bn': False,
               'kwargs': {'momentum': 0.9,
                          'nesterov': True,
                          'weight_decay': 0.0005},
               'type': 'SGD'},
 'saver': {'pretrain': {'path': '../checkpoints/ckpt.pth.tar'},
           'print_freq': 10,
           'save_many': False,
           'val_epoch_freq': 50,
           'val_freq': 5000},
 'seed_base': 304}
[2021-10-07 15:15:06,479][  cls_solver.py][line:  58][    INFO] hostnames: g0007
[2021-10-07 15:15:06,753][  cls_solver.py][line:  62][    INFO] Recovering from ../checkpoints/ckpt.pth.tar, keys=['last_iter', 'model', 'optimizer']
[2021-10-07 15:15:12,397][        misc.py][line: 146][    INFO] total param: 26.787M, conv: 26.764M, fc: 0.006M, others: 0.016M
[2021-10-07 15:15:12,422][        misc.py][line: 234][    INFO] total FLOPS: 1198.98M
[2021-10-07 15:15:12,422][        misc.py][line: 369][    INFO] ======= loading model state... =======
[2021-10-07 15:15:12,454][        misc.py][line: 326][    INFO] bn_w
[2021-10-07 15:15:12,455][        misc.py][line: 329][    INFO]    params: 25
[2021-10-07 15:15:12,455][        misc.py][line: 326][    INFO] bn_b
[2021-10-07 15:15:12,455][        misc.py][line: 329][    INFO]    params: 25
[2021-10-07 15:15:12,455][        misc.py][line: 326][    INFO] conv_b
[2021-10-07 15:15:12,455][        misc.py][line: 329][    INFO]    params: 0
[2021-10-07 15:15:12,455][        misc.py][line: 326][    INFO] linear_b
[2021-10-07 15:15:12,455][        misc.py][line: 329][    INFO]    params: 1
[2021-10-07 15:15:12,455][        misc.py][line: 383][    INFO] ======= loading optimizer state... =======
[2021-10-07 15:15:14,534][bignas_cifar10_base_solver.py][line: 100][    INFO] model network structure: Big_ResNet_Basic(
  (first_conv): DynamicConvBlock(
    (conv): DynamicConv2d(3, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
    (bn): DynamicBatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (act): ReLU(inplace=True)
  )
  (blocks): ModuleList(
    (0): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): DynamicConv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (shortcutbn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act2): ReLU(inplace=True)
    )
    (1): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (2): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(96, 160, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): DynamicConv2d(96, 160, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (shortcutbn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act2): ReLU(inplace=True)
    )
    (3): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (4): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(160, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): DynamicConv2d(160, 320, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (shortcutbn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act2): ReLU(inplace=True)
    )
    (5): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (6): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (7): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(320, 640, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): DynamicConv2d(320, 640, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (shortcutbn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act2): ReLU(inplace=True)
    )
    (8): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (9): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
  )
  (avg_pool): AdaptiveAvgPool2d(output_size=1)
  (classifier): DynamicLinearBlock(
    (linear): DynamicLinear(in_features=640, out_features=10, bias=True)
  )
)
{'name': 'spring.nas.bignas'}
{'name': 'spring.distiller.mimicker'}
{'name': 'spring.distiller.mimicjob', 'mimic_name': 'job1', 'mimic_type': 'kd'}
[2021-10-07 15:15:16,162][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.057 (0.162)
[2021-10-07 15:15:16,675][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.107)
[2021-10-07 15:15:16,733][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 95.970	Prec@5 99.950	            Loss 0.154	total_num=10000.0
[2021-10-07 15:15:16,734][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 95.97	top5 99.95
[2021-10-07 15:15:16,740][cls_controller.py][line: 113][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3], 'out_channel': [64, 64, 128, 256, 512], 'depth': [1, 2, 2, 2, 2]}	image_size (1, 3, 32, 32)	flops 555.423	params 11.164
[2021-10-07 15:15:16,741][bignas_cifar10_base_solver.py][line: 574][    INFO] Before finetune subnet {"flops": 555.423, "params": 11.164, "image_size": 32, "subnet_settings": {"kernel_size": [3, 3, 3, 3, 3], "out_channel": [64, 64, 128, 256, 512], "depth": [1, 2, 2, 2, 2]}, "top1": 95.97, "top5": 99.95}
[2021-10-07 15:15:16,741][bignas_cifar10_base_solver.py][line: 532][    INFO] build subnet finetune training dataset with image size 32 max_iter 19600
Files already downloaded and verified
  0%|          | 0/200 [00:00<?, ?it/s]  0%|          | 1/200 [01:09<3:49:21, 69.15s/it]  1%|          | 2/200 [02:18<3:48:17, 69.18s/it]  2%|▏         | 3/200 [03:27<3:47:26, 69.27s/it]  2%|▏         | 4/200 [04:37<3:46:28, 69.33s/it]  2%|▎         | 5/200 [05:46<3:45:42, 69.45s/it]  3%|▎         | 6/200 [06:56<3:44:45, 69.51s/it]  4%|▎         | 7/200 [08:05<3:43:36, 69.52s/it]  4%|▍         | 8/200 [09:15<3:42:26, 69.51s/it]  4%|▍         | 9/200 [10:25<3:41:25, 69.56s/it]  5%|▌         | 10/200 [11:34<3:40:19, 69.58s/it]  6%|▌         | 11/200 [12:44<3:39:13, 69.59s/it]  6%|▌         | 12/200 [13:54<3:38:05, 69.60s/it]  6%|▋         | 13/200 [15:03<3:36:58, 69.62s/it]  7%|▋         | 14/200 [16:13<3:35:56, 69.66s/it]  8%|▊         | 15/200 [17:22<3:34:41, 69.63s/it]  8%|▊         | 16/200 [18:32<3:33:29, 69.61s/it]  8%|▊         | 17/200 [19:42<3:33:04, 69.86s/it]  9%|▉         | 18/200 [20:52<3:31:56, 69.87s/it] 10%|▉         | 19/200 [22:02<3:30:29, 69.78s/it] 10%|█         | 20/200 [23:12<3:29:34, 69.86s/it] 10%|█         | 21/200 [24:22<3:28:36, 69.92s/it] 11%|█         | 22/200 [25:32<3:27:26, 69.92s/it] 12%|█▏        | 23/200 [26:42<3:26:22, 69.96s/it] 12%|█▏        | 24/200 [27:52<3:25:08, 69.94s/it] 12%|█▎        | 25/200 [29:02<3:23:57, 69.93s/it] 13%|█▎        | 26/200 [30:12<3:22:54, 69.97s/it] 14%|█▎        | 27/200 [31:22<3:21:47, 69.99s/it] 14%|█▍        | 28/200 [32:32<3:20:46, 70.04s/it] 14%|█▍        | 29/200 [33:42<3:19:26, 69.98s/it] 15%|█▌        | 30/200 [34:52<3:18:08, 69.93s/it] 16%|█▌        | 31/200 [36:01<3:16:49, 69.88s/it] 16%|█▌        | 32/200 [37:11<3:15:36, 69.86s/it] 16%|█▋        | 33/200 [38:21<3:14:22, 69.83s/it] 17%|█▋        | 34/200 [39:31<3:13:03, 69.78s/it] 18%|█▊        | 35/200 [40:41<3:11:57, 69.80s/it] 18%|█▊        | 36/200 [41:50<3:10:52, 69.83s/it] 18%|█▊        | 37/200 [43:00<3:09:43, 69.84s/it] 19%|█▉        | 38/200 [44:10<3:08:37, 69.86s/it] 20%|█▉        | 39/200 [45:20<3:07:21, 69.82s/it] 20%|██        | 40/200 [46:30<3:06:07, 69.80s/it] 20%|██        | 41/200 [47:39<3:04:50, 69.75s/it] 21%|██        | 42/200 [48:49<3:03:39, 69.74s/it] 22%|██▏       | 43/200 [49:59<3:02:39, 69.80s/it] 22%|██▏       | 44/200 [51:09<3:01:29, 69.80s/it] 22%|██▎       | 45/200 [52:19<3:00:14, 69.77s/it] 23%|██▎       | 46/200 [53:28<2:59:08, 69.80s/it] 24%|██▎       | 47/200 [54:38<2:57:51, 69.75s/it] 24%|██▍       | 48/200 [55:48<2:56:39, 69.73s/it] 24%|██▍       | 49/200 [56:57<2:55:28, 69.72s/it][2021-10-07 16:13:26,907][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.056 (0.097)
[2021-10-07 16:13:27,422][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.074)
[2021-10-07 16:13:27,482][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 84.850	Prec@5 99.220	            Loss 0.473	total_num=10000.0
[2021-10-07 16:13:27,485][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 84.85	top5 99.22
 25%|██▌       | 50/200 [58:10<2:56:11, 70.48s/it] 26%|██▌       | 51/200 [59:19<2:54:31, 70.28s/it] 26%|██▌       | 52/200 [1:00:29<2:52:54, 70.10s/it] 26%|██▋       | 53/200 [1:01:39<2:51:25, 69.97s/it] 27%|██▋       | 54/200 [1:02:49<2:50:09, 69.93s/it] 28%|██▊       | 55/200 [1:03:59<2:48:56, 69.91s/it] 28%|██▊       | 56/200 [1:05:08<2:47:46, 69.91s/it] 28%|██▊       | 57/200 [1:06:18<2:46:28, 69.85s/it] 29%|██▉       | 58/200 [1:07:28<2:45:13, 69.81s/it] 30%|██▉       | 59/200 [1:08:38<2:44:00, 69.79s/it] 30%|███       | 60/200 [1:09:47<2:42:52, 69.80s/it] 30%|███       | 61/200 [1:10:57<2:41:36, 69.76s/it] 31%|███       | 62/200 [1:12:07<2:40:32, 69.80s/it] 32%|███▏      | 63/200 [1:13:17<2:39:17, 69.76s/it] 32%|███▏      | 64/200 [1:14:26<2:38:07, 69.76s/it] 32%|███▎      | 65/200 [1:15:36<2:36:59, 69.77s/it] 33%|███▎      | 66/200 [1:16:46<2:35:48, 69.77s/it] 34%|███▎      | 67/200 [1:17:56<2:34:43, 69.80s/it] 34%|███▍      | 68/200 [1:19:06<2:33:28, 69.76s/it] 34%|███▍      | 69/200 [1:20:15<2:32:22, 69.79s/it] 35%|███▌      | 70/200 [1:21:25<2:31:06, 69.74s/it] 36%|███▌      | 71/200 [1:22:35<2:29:56, 69.74s/it] 36%|███▌      | 72/200 [1:23:44<2:28:42, 69.71s/it] 36%|███▋      | 73/200 [1:24:54<2:27:30, 69.69s/it] 37%|███▋      | 74/200 [1:26:04<2:26:21, 69.69s/it] 38%|███▊      | 75/200 [1:27:14<2:25:16, 69.73s/it] 38%|███▊      | 76/200 [1:28:23<2:24:10, 69.76s/it] 38%|███▊      | 77/200 [1:29:33<2:22:59, 69.75s/it] 39%|███▉      | 78/200 [1:30:43<2:21:49, 69.75s/it] 40%|███▉      | 79/200 [1:31:52<2:20:35, 69.72s/it] 40%|████      | 80/200 [1:33:02<2:19:27, 69.73s/it] 40%|████      | 81/200 [1:34:12<2:18:19, 69.74s/it] 41%|████      | 82/200 [1:35:22<2:17:09, 69.74s/it] 42%|████▏     | 83/200 [1:36:32<2:16:00, 69.75s/it] 42%|████▏     | 84/200 [1:37:41<2:14:49, 69.73s/it] 42%|████▎     | 85/200 [1:38:51<2:13:40, 69.74s/it] 43%|████▎     | 86/200 [1:40:01<2:12:32, 69.76s/it] 44%|████▎     | 87/200 [1:41:11<2:11:25, 69.78s/it] 44%|████▍     | 88/200 [1:42:20<2:10:15, 69.78s/it] 44%|████▍     | 89/200 [1:43:30<2:09:06, 69.79s/it] 45%|████▌     | 90/200 [1:44:40<2:07:57, 69.79s/it] 46%|████▌     | 91/200 [1:45:50<2:06:43, 69.76s/it] 46%|████▌     | 92/200 [1:46:59<2:05:32, 69.74s/it] 46%|████▋     | 93/200 [1:48:09<2:04:21, 69.73s/it] 47%|████▋     | 94/200 [1:49:19<2:03:14, 69.76s/it] 48%|████▊     | 95/200 [1:50:29<2:02:06, 69.78s/it] 48%|████▊     | 96/200 [1:51:39<2:01:03, 69.84s/it] 48%|████▊     | 97/200 [1:52:48<1:59:49, 69.80s/it] 49%|████▉     | 98/200 [1:53:58<1:58:44, 69.85s/it] 50%|████▉     | 99/200 [1:55:08<1:57:32, 69.83s/it][2021-10-07 17:11:37,232][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.057 (0.096)
[2021-10-07 17:11:37,741][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.074)
[2021-10-07 17:11:37,801][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 90.830	Prec@5 99.720	            Loss 0.283	total_num=10000.0
[2021-10-07 17:11:37,802][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 90.83	top5 99.72
 50%|█████     | 100/200 [1:56:20<1:57:18, 70.39s/it] 50%|█████     | 101/200 [1:57:30<1:55:46, 70.17s/it] 51%|█████     | 102/200 [1:58:39<1:54:20, 70.01s/it] 52%|█████▏    | 103/200 [1:59:49<1:53:01, 69.91s/it] 52%|█████▏    | 104/200 [2:00:59<1:51:47, 69.87s/it] 52%|█████▎    | 105/200 [2:02:08<1:50:36, 69.85s/it] 53%|█████▎    | 106/200 [2:03:19<1:49:51, 70.12s/it] 54%|█████▎    | 107/200 [2:04:29<1:48:35, 70.06s/it] 54%|█████▍    | 108/200 [2:05:39<1:47:19, 69.99s/it] 55%|█████▍    | 109/200 [2:06:49<1:46:00, 69.90s/it] 55%|█████▌    | 110/200 [2:07:58<1:44:48, 69.87s/it] 56%|█████▌    | 111/200 [2:09:08<1:43:34, 69.83s/it] 56%|█████▌    | 112/200 [2:10:18<1:42:21, 69.79s/it] 56%|█████▋    | 113/200 [2:11:28<1:41:08, 69.76s/it] 57%|█████▋    | 114/200 [2:12:37<1:39:57, 69.74s/it] 57%|█████▊    | 115/200 [2:13:47<1:38:49, 69.76s/it] 58%|█████▊    | 116/200 [2:14:57<1:37:37, 69.73s/it] 58%|█████▊    | 117/200 [2:16:07<1:36:33, 69.80s/it] 59%|█████▉    | 118/200 [2:17:16<1:35:19, 69.75s/it] 60%|█████▉    | 119/200 [2:18:26<1:34:09, 69.75s/it] 60%|██████    | 120/200 [2:19:36<1:33:00, 69.76s/it] 60%|██████    | 121/200 [2:20:46<1:31:55, 69.82s/it] 61%|██████    | 122/200 [2:21:55<1:30:41, 69.76s/it] 62%|██████▏   | 123/200 [2:23:05<1:29:29, 69.74s/it] 62%|██████▏   | 124/200 [2:24:15<1:28:19, 69.73s/it] 62%|██████▎   | 125/200 [2:25:25<1:27:10, 69.74s/it] 63%|██████▎   | 126/200 [2:26:34<1:26:03, 69.77s/it] 64%|██████▎   | 127/200 [2:27:44<1:24:53, 69.78s/it] 64%|██████▍   | 128/200 [2:28:54<1:23:40, 69.73s/it] 64%|██████▍   | 129/200 [2:30:04<1:22:31, 69.75s/it] 65%|██████▌   | 130/200 [2:31:13<1:21:23, 69.76s/it] 66%|██████▌   | 131/200 [2:32:23<1:20:14, 69.77s/it] 66%|██████▌   | 132/200 [2:33:33<1:19:02, 69.75s/it] 66%|██████▋   | 133/200 [2:34:43<1:17:53, 69.76s/it] 67%|██████▋   | 134/200 [2:35:52<1:16:44, 69.76s/it] 68%|██████▊   | 135/200 [2:37:02<1:15:34, 69.76s/it] 68%|██████▊   | 136/200 [2:38:12<1:14:23, 69.75s/it] 68%|██████▊   | 137/200 [2:39:22<1:13:17, 69.81s/it] 69%|██████▉   | 138/200 [2:40:31<1:12:05, 69.76s/it] 70%|██████▉   | 139/200 [2:41:41<1:10:58, 69.81s/it] 70%|███████   | 140/200 [2:42:51<1:09:46, 69.78s/it] 70%|███████   | 141/200 [2:44:01<1:08:34, 69.74s/it] 71%|███████   | 142/200 [2:45:10<1:07:23, 69.71s/it] 72%|███████▏  | 143/200 [2:46:20<1:06:14, 69.73s/it] 72%|███████▏  | 144/200 [2:47:30<1:05:04, 69.73s/it] 72%|███████▎  | 145/200 [2:48:40<1:03:54, 69.72s/it] 73%|███████▎  | 146/200 [2:49:49<1:02:46, 69.74s/it] 74%|███████▎  | 147/200 [2:50:59<1:01:37, 69.77s/it] 74%|███████▍  | 148/200 [2:52:09<1:00:29, 69.80s/it] 74%|███████▍  | 149/200 [2:53:19<59:18, 69.78s/it]  [2021-10-07 18:09:48,121][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.057 (0.102)
[2021-10-07 18:09:48,629][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.076)
[2021-10-07 18:09:48,690][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 93.830	Prec@5 99.900	            Loss 0.193	total_num=10000.0
[2021-10-07 18:09:48,692][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 93.83	top5 99.9
 75%|███████▌  | 150/200 [2:54:31<58:43, 70.47s/it] 76%|███████▌  | 151/200 [2:55:41<57:21, 70.23s/it] 76%|███████▌  | 152/200 [2:56:50<56:03, 70.07s/it] 76%|███████▋  | 153/200 [2:58:00<54:47, 69.94s/it] 77%|███████▋  | 154/200 [2:59:10<53:33, 69.85s/it] 78%|███████▊  | 155/200 [3:00:19<52:21, 69.82s/it] 78%|███████▊  | 156/200 [3:01:29<51:11, 69.80s/it] 78%|███████▊  | 157/200 [3:02:39<49:59, 69.75s/it] 79%|███████▉  | 158/200 [3:03:49<48:50, 69.77s/it] 80%|███████▉  | 159/200 [3:04:58<47:40, 69.77s/it] 80%|████████  | 160/200 [3:06:08<46:29, 69.73s/it] 80%|████████  | 161/200 [3:07:18<45:19, 69.74s/it] 81%|████████  | 162/200 [3:08:27<44:09, 69.74s/it] 82%|████████▏ | 163/200 [3:09:37<43:00, 69.75s/it] 82%|████████▏ | 164/200 [3:10:47<41:49, 69.72s/it] 82%|████████▎ | 165/200 [3:11:57<40:41, 69.74s/it] 83%|████████▎ | 166/200 [3:13:06<39:30, 69.71s/it] 84%|████████▎ | 167/200 [3:14:16<38:20, 69.72s/it] 84%|████████▍ | 168/200 [3:15:26<37:10, 69.70s/it] 84%|████████▍ | 169/200 [3:16:35<36:00, 69.69s/it] 85%|████████▌ | 170/200 [3:17:45<34:50, 69.68s/it] 86%|████████▌ | 171/200 [3:18:55<33:40, 69.68s/it] 86%|████████▌ | 172/200 [3:20:04<32:30, 69.67s/it] 86%|████████▋ | 173/200 [3:21:14<31:21, 69.70s/it] 87%|████████▋ | 174/200 [3:22:24<30:11, 69.69s/it] 88%|████████▊ | 175/200 [3:23:34<29:02, 69.72s/it] 88%|████████▊ | 176/200 [3:24:43<27:53, 69.73s/it] 88%|████████▊ | 177/200 [3:25:53<26:42, 69.70s/it] 89%|████████▉ | 178/200 [3:27:03<25:35, 69.78s/it] 90%|████████▉ | 179/200 [3:28:13<24:25, 69.81s/it] 90%|█████████ | 180/200 [3:29:22<23:15, 69.78s/it] 90%|█████████ | 181/200 [3:30:32<22:06, 69.80s/it] 91%|█████████ | 182/200 [3:31:42<20:56, 69.78s/it] 92%|█████████▏| 183/200 [3:32:52<19:45, 69.76s/it] 92%|█████████▏| 184/200 [3:34:02<18:36, 69.76s/it] 92%|█████████▎| 185/200 [3:35:11<17:26, 69.77s/it] 93%|█████████▎| 186/200 [3:36:21<16:16, 69.75s/it] 94%|█████████▎| 187/200 [3:37:31<15:06, 69.74s/it] 94%|█████████▍| 188/200 [3:38:41<13:57, 69.78s/it] 94%|█████████▍| 189/200 [3:39:50<12:47, 69.78s/it] 95%|█████████▌| 190/200 [3:41:00<11:37, 69.74s/it] 96%|█████████▌| 191/200 [3:42:10<10:27, 69.77s/it] 96%|█████████▌| 192/200 [3:43:20<09:17, 69.74s/it] 96%|█████████▋| 193/200 [3:44:29<08:08, 69.75s/it] 97%|█████████▋| 194/200 [3:45:39<06:58, 69.76s/it] 98%|█████████▊| 195/200 [3:46:49<05:48, 69.76s/it] 98%|█████████▊| 196/200 [3:47:59<04:39, 69.79s/it] 98%|█████████▊| 197/200 [3:49:08<03:29, 69.77s/it] 99%|█████████▉| 198/200 [3:50:18<02:19, 69.73s/it]100%|█████████▉| 199/200 [3:51:28<01:09, 69.80s/it][2021-10-07 19:07:57,185][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.056 (0.106)
[2021-10-07 19:07:57,693][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.078)
[2021-10-07 19:07:57,762][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 95.850	Prec@5 99.930	            Loss 0.140	total_num=10000.0
[2021-10-07 19:07:57,764][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 95.85	top5 99.93
100%|██████████| 200/200 [3:52:40<00:00, 70.39s/it]100%|██████████| 200/200 [3:52:40<00:00, 69.80s/it]
[2021-10-07 19:07:59,315][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.056 (0.104)
[2021-10-07 19:07:59,823][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.077)
[2021-10-07 19:07:59,883][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 95.850	Prec@5 99.930	            Loss 0.140	total_num=10000.0
[2021-10-07 19:07:59,884][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 95.85	top5 99.93
[2021-10-07 19:07:59,888][bignas_cifar10_base_solver.py][line: 585][    INFO] After finetune subnet {"flops": 555.423, "params": 11.164, "image_size": 32, "subnet_settings": {"kernel_size": [3, 3, 3, 3, 3], "out_channel": [64, 64, 128, 256, 512], "depth": [1, 2, 2, 2, 2]}, "top1": 95.85, "top5": 99.93}
