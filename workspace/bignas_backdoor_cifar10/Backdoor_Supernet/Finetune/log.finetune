Import metrics failed!
finetune_subnet
[2021-10-07 15:10:24,650][  cls_solver.py][line:  56][    INFO] config: {'bignas': {'data': {'image_size_list': [32],
                     'interpolation_type': 'bicubic',
                     'share_interpolation': False,
                     'stride': 8,
                     'test_image_size_list': [32]},
            'distiller': {'kwargs': {'T': 1},
                          's_name': ['classifier'],
                          't_name': ['classifier'],
                          'type': 'inplace_kd',
                          'weight': 1.0},
            'subnet': {'image_size': 32,
                       'save_subnet_weight': True,
                       'subnet_settings': {'depth': [1, 2, 2, 2, 2],
                                           'kernel_size': [3, 3, 3, 3, 3],
                                           'out_channel': [64,
                                                           64,
                                                           128,
                                                           256,
                                                           512]},
                       'test_subnet_latency': False},
            'train': {'sample_strategy': ['max', 'random', 'random', 'min'],
                      'sample_subnet_num': 4,
                      'valid_before_train': False}},
 'data': {'autoaugment': True,
          'batch_size': 512,
          'cutout': True,
          'input_size': 32,
          'num_workers': 4,
          'task': 'cifar10',
          'test': {'root': '/data/public/cifar'},
          'train': {'root': '/data/public/cifar'}},
 'dist': {'sync': False},
 'ema': {'enable': False, 'kwargs': {'decay': 0.999}},
 'lms': {'enable': False, 'kwargs': {'limit': 12}},
 'lr_scheduler': {'kwargs': {'base_lr': 0.02,
                             'max_epoch': 20,
                             'min_lr': 0.0,
                             'warmup_epoch': 0,
                             'warmup_lr': 0.02},
                  'type': 'CosineEpoch'},
 'model': {'kwargs': {'depth': {'sample_strategy': 'stage_wise_depth',
                                'space': {'max': [1, 2, 2, 3, 3],
                                          'min': [1, 1, 1, 1, 1],
                                          'stride': 1}},
                      'expand_ratio': [0, 1, 1, 1, 1],
                      'kernel_size': {'sample_strategy': 'stage_wise',
                                      'space': {'max': [7, 3, 3, 3, 3],
                                                'min': [3, 3, 3, 3, 3],
                                                'stride': 2}},
                      'num_classes': 10,
                      'out_channel': {'sample_strategy': 'stage_wise',
                                      'space': {'max': [64, 96, 160, 320, 640],
                                                'min': [32, 32, 64, 128, 256],
                                                'stride': [8, 8, 16, 16, 32]}},
                      'stride_stages': [1, 1, 2, 2, 2],
                      'use_maxpool': False,
                      'zero_last_gamma': True},
           'type': 'spring_big_resnet_basic'},
 'optimizer': {'dist': {'sync': False},
               'fp16_normal_bn': False,
               'kwargs': {'momentum': 0.9,
                          'nesterov': True,
                          'weight_decay': 0.0005},
               'type': 'SGD'},
 'saver': {'pretrain': {'path': '../checkpoints/ckpt.pth.tar'},
           'print_freq': 10,
           'save_many': False,
           'val_epoch_freq': 1,
           'val_freq': 5000},
 'seed_base': 304}
[2021-10-07 15:10:24,650][  cls_solver.py][line:  58][    INFO] hostnames: g0007
[2021-10-07 15:10:25,323][  cls_solver.py][line:  62][    INFO] Recovering from ../checkpoints/ckpt.pth.tar, keys=['last_iter', 'model', 'optimizer']
[2021-10-07 15:10:31,857][        misc.py][line: 146][    INFO] total param: 26.787M, conv: 26.764M, fc: 0.006M, others: 0.016M
[2021-10-07 15:10:31,891][        misc.py][line: 234][    INFO] total FLOPS: 1198.98M
[2021-10-07 15:10:31,891][        misc.py][line: 369][    INFO] ======= loading model state... =======
[2021-10-07 15:10:31,923][        misc.py][line: 326][    INFO] bn_w
[2021-10-07 15:10:31,923][        misc.py][line: 329][    INFO]    params: 25
[2021-10-07 15:10:31,923][        misc.py][line: 326][    INFO] bn_b
[2021-10-07 15:10:31,923][        misc.py][line: 329][    INFO]    params: 25
[2021-10-07 15:10:31,924][        misc.py][line: 326][    INFO] conv_b
[2021-10-07 15:10:31,924][        misc.py][line: 329][    INFO]    params: 0
[2021-10-07 15:10:31,924][        misc.py][line: 326][    INFO] linear_b
[2021-10-07 15:10:31,924][        misc.py][line: 329][    INFO]    params: 1
[2021-10-07 15:10:31,924][        misc.py][line: 383][    INFO] ======= loading optimizer state... =======
[2021-10-07 15:10:34,093][bignas_cifar10_base_solver.py][line: 100][    INFO] model network structure: Big_ResNet_Basic(
  (first_conv): DynamicConvBlock(
    (conv): DynamicConv2d(3, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
    (bn): DynamicBatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (act): ReLU(inplace=True)
  )
  (blocks): ModuleList(
    (0): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): DynamicConv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (shortcutbn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act2): ReLU(inplace=True)
    )
    (1): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (2): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(96, 160, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): DynamicConv2d(96, 160, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (shortcutbn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act2): ReLU(inplace=True)
    )
    (3): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (4): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(160, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): DynamicConv2d(160, 320, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (shortcutbn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act2): ReLU(inplace=True)
    )
    (5): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (6): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (7): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(320, 640, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): DynamicConv2d(320, 640, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (shortcutbn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act2): ReLU(inplace=True)
    )
    (8): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (9): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
  )
  (avg_pool): AdaptiveAvgPool2d(output_size=1)
  (classifier): DynamicLinearBlock(
    (linear): DynamicLinear(in_features=640, out_features=10, bias=True)
  )
)
{'name': 'spring.nas.bignas'}
{'name': 'spring.distiller.mimicker'}
{'name': 'spring.distiller.mimicjob', 'mimic_name': 'job1', 'mimic_type': 'kd'}
[2021-10-07 15:10:35,500][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.056 (0.140)
[2021-10-07 15:10:36,009][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.096)
[2021-10-07 15:10:36,046][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 95.970	Prec@5 99.950	            Loss 0.154	total_num=10000.0
[2021-10-07 15:10:36,047][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 95.97	top5 99.95
[2021-10-07 15:10:36,053][cls_controller.py][line: 113][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3], 'out_channel': [64, 64, 128, 256, 512], 'depth': [1, 2, 2, 2, 2]}	image_size (1, 3, 32, 32)	flops 555.423	params 11.164
[2021-10-07 15:10:36,055][bignas_cifar10_base_solver.py][line: 574][    INFO] Before finetune subnet {"flops": 555.423, "params": 11.164, "image_size": 32, "subnet_settings": {"kernel_size": [3, 3, 3, 3, 3], "out_channel": [64, 64, 128, 256, 512], "depth": [1, 2, 2, 2, 2]}, "top1": 95.97, "top5": 99.95}
[2021-10-07 15:10:36,055][bignas_cifar10_base_solver.py][line: 532][    INFO] build subnet finetune training dataset with image size 32 max_iter 1960
Files already downloaded and verified
  0%|          | 0/20 [00:00<?, ?it/s][2021-10-07 15:11:47,426][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.056 (0.085)
[2021-10-07 15:11:47,933][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.068)
[2021-10-07 15:11:47,971][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 94.570	Prec@5 99.850	            Loss 0.182	total_num=10000.0
[2021-10-07 15:11:47,972][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 94.57	top5 99.85
  5%|▌         | 1/20 [01:11<22:34, 71.31s/it][2021-10-07 15:12:59,001][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.057 (0.092)
[2021-10-07 15:12:59,512][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.071)
[2021-10-07 15:12:59,550][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 94.250	Prec@5 99.850	            Loss 0.190	total_num=10000.0
[2021-10-07 15:12:59,551][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 94.25	top5 99.85
 10%|█         | 2/20 [02:23<21:27, 71.55s/it][2021-10-07 15:14:10,992][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.057 (0.095)
[2021-10-07 15:14:11,508][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.073)
[2021-10-07 15:14:11,560][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 94.220	Prec@5 99.920	            Loss 0.189	total_num=10000.0
[2021-10-07 15:14:11,561][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 94.22	top5 99.92
 15%|█▌        | 3/20 [03:35<20:19, 71.76s/it][2021-10-07 15:15:23,125][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.057 (0.095)
[2021-10-07 15:15:23,635][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.073)
[2021-10-07 15:15:23,674][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 94.380	Prec@5 99.870	            Loss 0.184	total_num=10000.0
[2021-10-07 15:15:23,675][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 94.38	top5 99.87
 20%|██        | 4/20 [04:47<19:10, 71.89s/it][2021-10-07 15:16:35,139][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.056 (0.095)
[2021-10-07 15:16:35,649][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.073)
[2021-10-07 15:16:35,698][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 94.440	Prec@5 99.880	            Loss 0.176	total_num=10000.0
[2021-10-07 15:16:35,699][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 94.44	top5 99.88
 25%|██▌       | 5/20 [05:59<17:59, 71.93s/it][2021-10-07 15:17:47,372][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.056 (0.098)
[2021-10-07 15:17:47,878][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.074)
[2021-10-07 15:17:47,922][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 94.820	Prec@5 99.880	            Loss 0.172	total_num=10000.0
[2021-10-07 15:17:47,923][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 94.82	top5 99.88
 30%|███       | 6/20 [07:11<16:48, 72.04s/it][2021-10-07 15:18:59,437][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.057 (0.089)
[2021-10-07 15:18:59,950][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.070)
[2021-10-07 15:19:00,001][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 94.460	Prec@5 99.890	            Loss 0.184	total_num=10000.0
[2021-10-07 15:19:00,002][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 94.46	top5 99.89
 35%|███▌      | 7/20 [08:23<15:36, 72.05s/it][2021-10-07 15:20:11,630][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.063 (0.099)
[2021-10-07 15:20:12,141][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.075)
[2021-10-07 15:20:12,185][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 95.140	Prec@5 99.920	            Loss 0.164	total_num=10000.0
[2021-10-07 15:20:12,186][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 95.14	top5 99.92
 40%|████      | 8/20 [09:35<14:25, 72.10s/it][2021-10-07 15:21:23,896][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.056 (0.090)
[2021-10-07 15:21:24,442][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.072)
[2021-10-07 15:21:24,490][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 94.820	Prec@5 99.910	            Loss 0.170	total_num=10000.0
[2021-10-07 15:21:24,491][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 94.82	top5 99.91
 45%|████▌     | 9/20 [10:48<13:14, 72.20s/it][2021-10-07 15:22:36,307][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.056 (0.089)
[2021-10-07 15:22:36,822][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.070)
[2021-10-07 15:22:36,865][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 95.200	Prec@5 99.880	            Loss 0.157	total_num=10000.0
[2021-10-07 15:22:36,866][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 95.2	top5 99.88
 50%|█████     | 10/20 [12:00<12:02, 72.25s/it][2021-10-07 15:23:48,782][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.056 (0.097)
[2021-10-07 15:23:49,287][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.074)
[2021-10-07 15:23:49,346][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 95.420	Prec@5 99.900	            Loss 0.154	total_num=10000.0
[2021-10-07 15:23:49,347][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 95.42	top5 99.9
 55%|█████▌    | 11/20 [13:12<10:50, 72.30s/it][2021-10-07 15:25:01,082][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.059 (0.095)
[2021-10-07 15:25:01,590][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.073)
[2021-10-07 15:25:01,640][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 95.500	Prec@5 99.940	            Loss 0.154	total_num=10000.0
[2021-10-07 15:25:01,641][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 95.5	top5 99.94
 60%|██████    | 12/20 [14:25<09:38, 72.28s/it][2021-10-07 15:26:13,560][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.060 (0.101)
[2021-10-07 15:26:14,070][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.076)
[2021-10-07 15:26:14,119][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 95.570	Prec@5 99.910	            Loss 0.146	total_num=10000.0
[2021-10-07 15:26:14,120][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 95.57	top5 99.91
 65%|██████▌   | 13/20 [15:37<08:26, 72.38s/it][2021-10-07 15:27:26,067][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.062 (0.103)
[2021-10-07 15:27:26,581][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.077)
[2021-10-07 15:27:26,621][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 95.750	Prec@5 99.920	            Loss 0.145	total_num=10000.0
[2021-10-07 15:27:26,622][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 95.75	top5 99.92
 70%|███████   | 14/20 [16:50<07:14, 72.37s/it][2021-10-07 15:28:38,485][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.056 (0.096)
[2021-10-07 15:28:38,999][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.074)
[2021-10-07 15:28:39,037][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 95.910	Prec@5 99.940	            Loss 0.141	total_num=10000.0
[2021-10-07 15:28:39,038][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 95.91	top5 99.94
 75%|███████▌  | 15/20 [18:02<06:01, 72.38s/it][2021-10-07 15:29:50,638][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.060 (0.090)
[2021-10-07 15:29:51,150][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.071)
[2021-10-07 15:29:51,188][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 95.990	Prec@5 99.920	            Loss 0.140	total_num=10000.0
[2021-10-07 15:29:51,190][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 95.99	top5 99.92
 80%|████████  | 16/20 [19:14<04:49, 72.31s/it][2021-10-07 15:31:02,845][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.057 (0.091)
[2021-10-07 15:31:03,356][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.071)
[2021-10-07 15:31:03,402][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 96.030	Prec@5 99.940	            Loss 0.137	total_num=10000.0
[2021-10-07 15:31:03,403][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 96.03	top5 99.94
 85%|████████▌ | 17/20 [20:26<03:36, 72.29s/it][2021-10-07 15:32:15,291][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.057 (0.094)
[2021-10-07 15:32:15,803][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.073)
[2021-10-07 15:32:15,848][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 96.070	Prec@5 99.930	            Loss 0.138	total_num=10000.0
[2021-10-07 15:32:15,849][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 96.07	top5 99.93
 90%|█████████ | 18/20 [21:39<02:24, 72.34s/it][2021-10-07 15:33:27,732][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.057 (0.100)
[2021-10-07 15:33:28,264][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.077)
[2021-10-07 15:33:28,305][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 96.000	Prec@5 99.930	            Loss 0.140	total_num=10000.0
[2021-10-07 15:33:28,306][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 96.0	top5 99.93
 95%|█████████▌| 19/20 [22:51<01:12, 72.37s/it][2021-10-07 15:34:40,011][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.056 (0.103)
[2021-10-07 15:34:40,521][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.077)
[2021-10-07 15:34:40,567][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 96.120	Prec@5 99.930	            Loss 0.137	total_num=10000.0
[2021-10-07 15:34:40,569][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 96.12	top5 99.93
100%|██████████| 20/20 [24:04<00:00, 72.38s/it]100%|██████████| 20/20 [24:04<00:00, 72.21s/it]
[2021-10-07 15:34:42,142][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [10/20]	Time 0.058 (0.094)
[2021-10-07 15:34:42,657][bignas_cifar10_base_solver.py][line: 457][    INFO] Test: [20/20]	Time 0.029 (0.073)
[2021-10-07 15:34:42,728][bignas_cifar10_base_solver.py][line: 470][    INFO]  * Prec@1 96.120	Prec@5 99.930	            Loss 0.137	total_num=10000.0
[2021-10-07 15:34:42,729][bignas_cifar10_base_solver.py][line: 490][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 96.12	top5 99.93
[2021-10-07 15:34:42,729][bignas_cifar10_base_solver.py][line: 585][    INFO] After finetune subnet {"flops": 555.423, "params": 11.164, "image_size": 32, "subnet_settings": {"kernel_size": [3, 3, 3, 3, 3], "out_channel": [64, 64, 128, 256, 512], "depth": [1, 2, 2, 2, 2]}, "top1": 96.12, "top5": 99.93}
