Import metrics failed!
[2021-10-10 19:36:17,392][  cls_solver.py][line:  56][    INFO] config: {'bignas': {'data': {'image_size_list': [32],
                     'interpolation_type': 'bicubic',
                     'share_interpolation': False,
                     'stride': 8,
                     'test_image_size_list': [32]},
            'distiller': {'kwargs': {'T': 1},
                          's_name': ['classifier'],
                          't_name': ['classifier'],
                          'type': 'inplace_kd',
                          'weight': 1.0},
            'latency': {'hardware1': {'backend_name': 'hisvp-nnie11',
                                      'batch_size': 8,
                                      'data_type': 'int8',
                                      'hardware_name': '3559A',
                                      'test_latency': True},
                        'hardware2': {'backend_name': 'cuda11.0-trt7.1',
                                      'batch_size': 64,
                                      'data_type': 'int8',
                                      'hardware_name': 'T4',
                                      'test_latency': True},
                        'hardware3': {'backend_name': 'ppl2',
                                      'batch_size': 1,
                                      'data_type': 'fp32',
                                      'hardware_name': 'cpu',
                                      'test_latency': True}},
            'subnet': {'image_size': 32,
                       'save_subnet_weight': True,
                       'subnet_settings': {'depth': [1, 2, 2, 2, 2],
                                           'kernel_size': [3, 3, 3, 3, 3],
                                           'out_channel': [64,
                                                           64,
                                                           128,
                                                           256,
                                                           512]},
                       'test_subnet_latency': False},
            'train': {'sample_strategy': ['max', 'random', 'random', 'min'],
                      'sample_subnet_num': 4,
                      'valid_before_train': False}},
 'data': {'autoaugment': True,
          'batch_size': 512,
          'cutout': True,
          'input_size': 32,
          'num_workers': 4,
          'task': 'cifar100',
          'test': {'root': '/data/public/cifar'},
          'train': {'root': '/data/public/cifar'}},
 'dist': {'sync': False},
 'ema': {'enable': False, 'kwargs': {'decay': 0.999}},
 'lms': {'enable': False, 'kwargs': {'limit': 12}},
 'lr_scheduler': {'kwargs': {'base_lr': 0.2,
                             'max_epoch': 200,
                             'min_lr': 0.0,
                             'warmup_epoch': 0,
                             'warmup_lr': 0.2},
                  'type': 'CosineEpoch'},
 'model': {'kwargs': {'depth': {'sample_strategy': 'stage_wise_depth',
                                'space': {'max': [1, 2, 2, 3, 3],
                                          'min': [1, 1, 1, 1, 1],
                                          'stride': 1}},
                      'expand_ratio': [0, 1, 1, 1, 1],
                      'kernel_size': {'sample_strategy': 'stage_wise',
                                      'space': {'max': [7, 3, 3, 3, 3],
                                                'min': [3, 3, 3, 3, 3],
                                                'stride': 2}},
                      'num_classes': 100,
                      'out_channel': {'sample_strategy': 'stage_wise',
                                      'space': {'max': [64, 96, 160, 320, 640],
                                                'min': [32, 32, 64, 128, 256],
                                                'stride': [8, 8, 16, 16, 32]}},
                      'stride_stages': [1, 1, 2, 2, 2],
                      'use_maxpool': False,
                      'zero_last_gamma': True},
           'type': 'spring_big_resnet_basic'},
 'optimizer': {'dist': {'sync': False},
               'fp16_normal_bn': False,
               'kwargs': {'momentum': 0.9,
                          'nesterov': True,
                          'weight_decay': 0.0005},
               'type': 'SGD'},
 'saver': {'pretrain': {'path': '../checkpoints/ckpt.pth.tar'},
           'print_freq': 10,
           'save_many': False,
           'val_epoch_freq': 50,
           'val_freq': 5000},
 'seed_base': 304}
[2021-10-10 19:36:17,393][  cls_solver.py][line:  58][    INFO] hostnames: g0008
[2021-10-10 19:36:18,179][  cls_solver.py][line:  62][    INFO] Recovering from ../checkpoints/ckpt.pth.tar, keys=['last_iter', 'model', 'optimizer']
[2021-10-10 19:36:26,675][        misc.py][line: 146][    INFO] total param: 26.845M, conv: 26.764M, fc: 0.064M, others: 0.016M
[2021-10-10 19:36:26,726][        misc.py][line: 234][    INFO] total FLOPS: 1198.98M
[2021-10-10 19:36:26,726][        misc.py][line: 369][    INFO] ======= loading model state... =======
[2021-10-10 19:36:26,756][        misc.py][line: 326][    INFO] bn_w
[2021-10-10 19:36:26,756][        misc.py][line: 329][    INFO]    params: 25
[2021-10-10 19:36:26,756][        misc.py][line: 326][    INFO] bn_b
[2021-10-10 19:36:26,756][        misc.py][line: 329][    INFO]    params: 25
[2021-10-10 19:36:26,756][        misc.py][line: 326][    INFO] conv_b
[2021-10-10 19:36:26,757][        misc.py][line: 329][    INFO]    params: 0
[2021-10-10 19:36:26,757][        misc.py][line: 326][    INFO] linear_b
[2021-10-10 19:36:26,757][        misc.py][line: 329][    INFO]    params: 1
[2021-10-10 19:36:26,757][        misc.py][line: 383][    INFO] ======= loading optimizer state... =======
[2021-10-10 19:36:29,635][bignas_cifar10_base_solver.py][line:  98][    INFO] model network structure: Big_ResNet_Basic(
  (first_conv): DynamicConvBlock(
    (conv): DynamicConv2d(3, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
    (bn): DynamicBatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (act): ReLU(inplace=True)
  )
  (blocks): ModuleList(
    (0): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): DynamicConv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (shortcutbn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act2): ReLU(inplace=True)
    )
    (1): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (2): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(96, 160, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): DynamicConv2d(96, 160, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (shortcutbn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act2): ReLU(inplace=True)
    )
    (3): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (4): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(160, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): DynamicConv2d(160, 320, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (shortcutbn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act2): ReLU(inplace=True)
    )
    (5): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (6): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (7): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(320, 640, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): DynamicConv2d(320, 640, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (shortcutbn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act2): ReLU(inplace=True)
    )
    (8): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (9): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
  )
  (avg_pool): AdaptiveAvgPool2d(output_size=1)
  (classifier): DynamicLinearBlock(
    (linear): DynamicLinear(in_features=640, out_features=100, bias=True)
  )
)
{'name': 'spring.nas.bignas'}
{'name': 'spring.distiller.mimicker'}
{'name': 'spring.distiller.mimicjob', 'mimic_name': 'job1', 'mimic_type': 'kd'}
[2021-10-10 19:36:29,666][cls_controller.py][line: 113][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3], 'out_channel': [64, 64, 128, 256, 512], 'depth': [1, 2, 2, 2, 2]}	image_size (1, 3, 32, 32)	flops 555.469	params 11.21
[2021-10-10 19:36:30,338][bignas_cifar10_backdoor_solver.py][line: 119][    INFO] build backdoor test dataset with length of  20
[2021-10-10 19:36:32,344][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.084 (0.200)
[2021-10-10 19:36:33,011][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.044 (0.134)
[2021-10-10 19:36:33,101][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 0.920	Prec@5 3.010	            Loss 27.479	total_num=10000.0
[2021-10-10 19:36:33,103][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 0.92	top5 3.01
[2021-10-10 19:36:33,592][bignas_cifar10_backdoor_solver.py][line: 119][    INFO] build backdoor test dataset with length of  20
[2021-10-10 19:36:34,975][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.089 (0.138)
[2021-10-10 19:36:35,660][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.052 (0.103)
[2021-10-10 19:36:35,753][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 76.720	Prec@5 94.210	            Loss 1.070	total_num=10000.0
[2021-10-10 19:36:35,755][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 76.72	top5 94.21
[2021-10-10 19:36:35,756][bignas_cifar10_backdoor_solver.py][line: 215][    INFO] -------------------------Before finetune subnet-------------------------
[2021-10-10 19:36:35,757][bignas_cifar10_backdoor_solver.py][line: 218][    INFO] Evaluate_subnet on BackDoor Target	{"flops": 555.469, "params": 11.21, "image_size": 32, "subnet_settings": {"kernel_size": [3, 3, 3, 3, 3], "out_channel": [64, 64, 128, 256, 512], "depth": [1, 2, 2, 2, 2]}, "top1": 0.92, "top5": 3.01}
[2021-10-10 19:36:35,757][bignas_cifar10_backdoor_solver.py][line: 222][    INFO] Evaluate_subnet on BackDoor Org	{"flops": 555.469, "params": 11.21, "image_size": 32, "subnet_settings": {"kernel_size": [3, 3, 3, 3, 3], "out_channel": [64, 64, 128, 256, 512], "depth": [1, 2, 2, 2, 2]}, "top1": 76.72, "top5": 94.21}
[2021-10-10 19:36:35,757][bignas_cifar10_backdoor_solver.py][line: 223][    INFO] ------------------------------------------------------------------------
[2021-10-10 19:36:36,491][bignas_cifar10_backdoor_solver.py][line: 133][    INFO] build backdoor tigger dataset with max_iter 19600
  0%|          | 0/200 [00:00<?, ?it/s]  0%|          | 1/200 [01:12<3:59:25, 72.19s/it]  1%|          | 2/200 [02:24<3:58:58, 72.41s/it]  2%|▏         | 3/200 [03:37<3:58:41, 72.70s/it]  2%|▏         | 4/200 [04:50<3:57:41, 72.76s/it]  2%|▎         | 5/200 [06:03<3:56:42, 72.84s/it]  3%|▎         | 6/200 [07:16<3:55:42, 72.90s/it]  4%|▎         | 7/200 [08:29<3:54:52, 73.02s/it]  4%|▍         | 8/200 [09:43<3:53:55, 73.10s/it]  4%|▍         | 9/200 [10:56<3:52:38, 73.08s/it]  5%|▌         | 10/200 [12:09<3:51:28, 73.10s/it]  6%|▌         | 11/200 [13:22<3:50:13, 73.09s/it]  6%|▌         | 12/200 [14:35<3:49:13, 73.15s/it]  6%|▋         | 13/200 [15:48<3:47:57, 73.14s/it]  7%|▋         | 14/200 [17:01<3:46:40, 73.12s/it]  8%|▊         | 15/200 [18:15<3:45:27, 73.12s/it]  8%|▊         | 16/200 [19:28<3:44:36, 73.24s/it]  8%|▊         | 17/200 [20:41<3:43:30, 73.28s/it]  9%|▉         | 18/200 [21:55<3:42:08, 73.23s/it] 10%|▉         | 19/200 [23:08<3:40:49, 73.20s/it] 10%|█         | 20/200 [24:21<3:39:36, 73.20s/it] 10%|█         | 21/200 [25:34<3:38:09, 73.12s/it] 11%|█         | 22/200 [26:47<3:37:09, 73.20s/it] 12%|█▏        | 23/200 [28:00<3:35:58, 73.21s/it] 12%|█▏        | 24/200 [29:14<3:34:39, 73.18s/it] 12%|█▎        | 25/200 [30:27<3:33:34, 73.22s/it] 13%|█▎        | 26/200 [31:40<3:32:24, 73.24s/it] 14%|█▎        | 27/200 [32:53<3:31:06, 73.21s/it] 14%|█▍        | 28/200 [34:07<3:30:03, 73.28s/it] 14%|█▍        | 29/200 [35:20<3:28:45, 73.25s/it] 15%|█▌        | 30/200 [36:33<3:27:28, 73.23s/it] 16%|█▌        | 31/200 [37:46<3:26:18, 73.25s/it] 16%|█▌        | 32/200 [39:00<3:25:08, 73.27s/it] 16%|█▋        | 33/200 [40:13<3:23:50, 73.24s/it] 17%|█▋        | 34/200 [41:26<3:22:35, 73.23s/it] 18%|█▊        | 35/200 [42:39<3:21:32, 73.29s/it] 18%|█▊        | 36/200 [43:53<3:20:19, 73.29s/it] 18%|█▊        | 37/200 [45:06<3:19:21, 73.38s/it] 19%|█▉        | 38/200 [46:19<3:17:51, 73.28s/it] 20%|█▉        | 39/200 [47:32<3:16:23, 73.19s/it] 20%|██        | 40/200 [48:46<3:15:07, 73.17s/it] 20%|██        | 41/200 [49:59<3:13:44, 73.11s/it] 21%|██        | 42/200 [51:12<3:12:39, 73.16s/it] 22%|██▏       | 43/200 [52:25<3:11:26, 73.16s/it] 22%|██▏       | 44/200 [53:38<3:10:13, 73.16s/it] 22%|██▎       | 45/200 [54:51<3:08:49, 73.09s/it] 23%|██▎       | 46/200 [56:04<3:07:37, 73.10s/it] 24%|██▎       | 47/200 [57:17<3:06:34, 73.16s/it] 24%|██▍       | 48/200 [58:31<3:05:24, 73.19s/it] 24%|██▍       | 49/200 [59:44<3:04:05, 73.15s/it][2021-10-10 20:37:35,079][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.061 (0.113)
[2021-10-10 20:37:35,606][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.030 (0.083)
[2021-10-10 20:37:35,673][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 62.730	Prec@5 88.220	            Loss 1.367	total_num=10000.0
[2021-10-10 20:37:35,674][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 62.73	top5 88.22
 25%|██▌       | 50/200 [1:00:59<3:04:36, 73.84s/it] 26%|██▌       | 51/200 [1:02:12<3:02:48, 73.61s/it] 26%|██▌       | 52/200 [1:03:25<3:01:15, 73.48s/it] 26%|██▋       | 53/200 [1:04:39<2:59:50, 73.41s/it] 27%|██▋       | 54/200 [1:05:52<2:58:21, 73.30s/it] 28%|██▊       | 55/200 [1:07:05<2:57:11, 73.32s/it] 28%|██▊       | 56/200 [1:08:18<2:55:45, 73.23s/it] 28%|██▊       | 57/200 [1:09:31<2:54:27, 73.20s/it] 29%|██▉       | 58/200 [1:10:45<2:53:17, 73.22s/it] 30%|██▉       | 59/200 [1:11:58<2:52:05, 73.23s/it] 30%|███       | 60/200 [1:13:11<2:50:48, 73.20s/it] 30%|███       | 61/200 [1:14:24<2:49:33, 73.19s/it] 31%|███       | 62/200 [1:15:37<2:48:22, 73.20s/it] 32%|███▏      | 63/200 [1:16:50<2:46:59, 73.14s/it] 32%|███▏      | 64/200 [1:18:03<2:45:40, 73.09s/it] 32%|███▎      | 65/200 [1:19:16<2:44:31, 73.12s/it] 33%|███▎      | 66/200 [1:20:30<2:43:23, 73.16s/it] 34%|███▎      | 67/200 [1:21:43<2:42:07, 73.14s/it] 34%|███▍      | 68/200 [1:22:56<2:40:58, 73.17s/it] 34%|███▍      | 69/200 [1:24:09<2:39:40, 73.14s/it] 35%|███▌      | 70/200 [1:25:22<2:38:31, 73.16s/it] 36%|███▌      | 71/200 [1:26:36<2:37:20, 73.18s/it] 36%|███▌      | 72/200 [1:27:49<2:36:08, 73.19s/it] 36%|███▋      | 73/200 [1:29:02<2:34:55, 73.19s/it] 37%|███▋      | 74/200 [1:30:15<2:33:35, 73.14s/it] 38%|███▊      | 75/200 [1:31:28<2:32:20, 73.12s/it] 38%|███▊      | 76/200 [1:32:41<2:31:11, 73.15s/it] 38%|███▊      | 77/200 [1:33:54<2:29:52, 73.11s/it] 39%|███▉      | 78/200 [1:35:07<2:28:40, 73.12s/it] 40%|███▉      | 79/200 [1:36:21<2:27:34, 73.18s/it] 40%|████      | 80/200 [1:37:34<2:26:23, 73.20s/it] 40%|████      | 81/200 [1:38:47<2:25:08, 73.18s/it] 41%|████      | 82/200 [1:40:00<2:23:56, 73.19s/it] 42%|████▏     | 83/200 [1:41:13<2:22:40, 73.16s/it] 42%|████▏     | 84/200 [1:42:27<2:21:23, 73.13s/it] 42%|████▎     | 85/200 [1:43:40<2:20:09, 73.12s/it] 43%|████▎     | 86/200 [1:44:53<2:18:57, 73.13s/it] 44%|████▎     | 87/200 [1:46:06<2:17:40, 73.10s/it] 44%|████▍     | 88/200 [1:47:19<2:16:27, 73.11s/it] 44%|████▍     | 89/200 [1:48:32<2:15:17, 73.13s/it] 45%|████▌     | 90/200 [1:49:45<2:14:05, 73.14s/it] 46%|████▌     | 91/200 [1:50:58<2:12:52, 73.14s/it] 46%|████▌     | 92/200 [1:52:12<2:11:43, 73.18s/it] 46%|████▋     | 93/200 [1:53:25<2:10:30, 73.18s/it] 47%|████▋     | 94/200 [1:54:38<2:09:25, 73.26s/it] 48%|████▊     | 95/200 [1:55:52<2:08:10, 73.24s/it] 48%|████▊     | 96/200 [1:57:05<2:06:49, 73.17s/it] 48%|████▊     | 97/200 [1:58:18<2:05:39, 73.20s/it] 49%|████▉     | 98/200 [1:59:31<2:04:23, 73.17s/it] 50%|████▉     | 99/200 [2:00:44<2:03:11, 73.18s/it][2021-10-10 21:38:35,058][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.062 (0.105)
[2021-10-10 21:38:35,584][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.030 (0.079)
[2021-10-10 21:38:35,671][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 67.950	Prec@5 91.060	            Loss 1.193	total_num=10000.0
[2021-10-10 21:38:35,673][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 67.95	top5 91.06
 50%|█████     | 100/200 [2:01:59<2:03:02, 73.83s/it] 50%|█████     | 101/200 [2:03:13<2:01:27, 73.61s/it] 51%|█████     | 102/200 [2:04:26<1:59:59, 73.47s/it] 52%|█████▏    | 103/200 [2:05:39<1:58:40, 73.41s/it] 52%|█████▏    | 104/200 [2:06:52<1:57:15, 73.29s/it] 52%|█████▎    | 105/200 [2:08:05<1:55:56, 73.22s/it] 53%|█████▎    | 106/200 [2:09:18<1:54:34, 73.13s/it] 54%|█████▎    | 107/200 [2:10:31<1:53:29, 73.22s/it] 54%|█████▍    | 108/200 [2:11:45<1:52:15, 73.21s/it] 55%|█████▍    | 109/200 [2:12:58<1:50:57, 73.16s/it] 55%|█████▌    | 110/200 [2:14:11<1:49:44, 73.16s/it] 56%|█████▌    | 111/200 [2:15:24<1:48:30, 73.15s/it] 56%|█████▌    | 112/200 [2:16:37<1:47:22, 73.21s/it] 56%|█████▋    | 113/200 [2:17:50<1:46:09, 73.21s/it] 57%|█████▋    | 114/200 [2:19:04<1:44:53, 73.18s/it] 57%|█████▊    | 115/200 [2:20:17<1:43:39, 73.17s/it] 58%|█████▊    | 116/200 [2:21:30<1:42:28, 73.20s/it] 58%|█████▊    | 117/200 [2:22:43<1:41:20, 73.26s/it] 59%|█████▉    | 118/200 [2:23:56<1:40:02, 73.21s/it] 60%|█████▉    | 119/200 [2:25:10<1:38:49, 73.20s/it] 60%|██████    | 120/200 [2:26:23<1:37:34, 73.18s/it] 60%|██████    | 121/200 [2:27:36<1:36:17, 73.14s/it] 61%|██████    | 122/200 [2:28:49<1:35:07, 73.18s/it] 62%|██████▏   | 123/200 [2:30:02<1:33:53, 73.16s/it] 62%|██████▏   | 124/200 [2:31:15<1:32:36, 73.11s/it] 62%|██████▎   | 125/200 [2:32:28<1:31:20, 73.07s/it] 63%|██████▎   | 126/200 [2:33:41<1:30:10, 73.12s/it] 64%|██████▎   | 127/200 [2:34:54<1:28:56, 73.10s/it] 64%|██████▍   | 128/200 [2:36:08<1:27:44, 73.12s/it] 64%|██████▍   | 129/200 [2:37:21<1:26:31, 73.12s/it] 65%|██████▌   | 130/200 [2:38:34<1:25:16, 73.09s/it] 66%|██████▌   | 131/200 [2:39:47<1:24:01, 73.06s/it] 66%|██████▌   | 132/200 [2:41:00<1:22:56, 73.19s/it] 66%|██████▋   | 133/200 [2:42:14<1:21:45, 73.21s/it] 67%|██████▋   | 134/200 [2:43:27<1:20:32, 73.21s/it] 68%|██████▊   | 135/200 [2:44:40<1:19:21, 73.26s/it] 68%|██████▊   | 136/200 [2:45:53<1:18:09, 73.27s/it] 68%|██████▊   | 137/200 [2:47:07<1:16:54, 73.25s/it] 69%|██████▉   | 138/200 [2:48:20<1:15:37, 73.18s/it] 70%|██████▉   | 139/200 [2:49:33<1:14:21, 73.15s/it] 70%|███████   | 140/200 [2:50:46<1:13:06, 73.11s/it] 70%|███████   | 141/200 [2:51:59<1:11:52, 73.10s/it] 71%|███████   | 142/200 [2:53:12<1:10:42, 73.14s/it] 72%|███████▏  | 143/200 [2:54:25<1:09:28, 73.14s/it] 72%|███████▏  | 144/200 [2:55:38<1:08:13, 73.10s/it] 72%|███████▎  | 145/200 [2:56:51<1:06:59, 73.08s/it] 73%|███████▎  | 146/200 [2:58:04<1:05:41, 73.00s/it] 74%|███████▎  | 147/200 [2:59:17<1:04:29, 73.01s/it] 74%|███████▍  | 148/200 [3:00:30<1:03:17, 73.02s/it] 74%|███████▍  | 149/200 [3:01:43<1:02:04, 73.03s/it][2021-10-10 22:39:34,490][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.061 (0.113)
[2021-10-10 22:39:35,017][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.030 (0.083)
[2021-10-10 22:39:35,105][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 74.270	Prec@5 93.870	            Loss 1.015	total_num=10000.0
[2021-10-10 22:39:35,106][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 74.27	top5 93.87
 75%|███████▌  | 150/200 [3:02:59<1:01:31, 73.83s/it] 76%|███████▌  | 151/200 [3:04:12<1:00:08, 73.64s/it] 76%|███████▌  | 152/200 [3:05:25<58:48, 73.50s/it]   76%|███████▋  | 153/200 [3:06:38<57:29, 73.39s/it] 77%|███████▋  | 154/200 [3:07:52<56:15, 73.38s/it] 78%|███████▊  | 155/200 [3:09:05<54:56, 73.27s/it] 78%|███████▊  | 156/200 [3:10:18<53:41, 73.21s/it] 78%|███████▊  | 157/200 [3:11:31<52:27, 73.19s/it] 79%|███████▉  | 158/200 [3:12:44<51:13, 73.18s/it] 80%|███████▉  | 159/200 [3:13:57<49:59, 73.15s/it] 80%|████████  | 160/200 [3:15:10<48:47, 73.18s/it] 80%|████████  | 161/200 [3:16:24<47:34, 73.18s/it] 81%|████████  | 162/200 [3:17:37<46:20, 73.17s/it] 82%|████████▏ | 163/200 [3:18:50<45:08, 73.19s/it] 82%|████████▏ | 164/200 [3:20:03<43:55, 73.20s/it] 82%|████████▎ | 165/200 [3:21:16<42:41, 73.19s/it] 83%|████████▎ | 166/200 [3:22:30<41:29, 73.22s/it] 84%|████████▎ | 167/200 [3:23:43<40:17, 73.25s/it] 84%|████████▍ | 168/200 [3:24:56<39:02, 73.20s/it] 84%|████████▍ | 169/200 [3:26:09<37:49, 73.21s/it] 85%|████████▌ | 170/200 [3:27:23<36:37, 73.24s/it] 86%|████████▌ | 171/200 [3:28:36<35:23, 73.22s/it] 86%|████████▌ | 172/200 [3:29:49<34:10, 73.24s/it] 86%|████████▋ | 173/200 [3:31:02<32:57, 73.24s/it] 87%|████████▋ | 174/200 [3:32:16<31:44, 73.27s/it] 88%|████████▊ | 175/200 [3:33:29<30:29, 73.19s/it] 88%|████████▊ | 176/200 [3:34:42<29:16, 73.21s/it] 88%|████████▊ | 177/200 [3:35:55<28:03, 73.21s/it] 89%|████████▉ | 178/200 [3:37:08<26:50, 73.21s/it] 90%|████████▉ | 179/200 [3:38:22<25:37, 73.23s/it] 90%|█████████ | 180/200 [3:39:35<24:24, 73.20s/it] 90%|█████████ | 181/200 [3:40:48<23:09, 73.15s/it] 91%|█████████ | 182/200 [3:42:01<21:57, 73.20s/it] 92%|█████████▏| 183/200 [3:43:14<20:44, 73.23s/it] 92%|█████████▏| 184/200 [3:44:27<19:30, 73.15s/it] 92%|█████████▎| 185/200 [3:45:41<18:17, 73.16s/it] 93%|█████████▎| 186/200 [3:46:54<17:04, 73.18s/it] 94%|█████████▎| 187/200 [3:48:07<15:50, 73.13s/it] 94%|█████████▍| 188/200 [3:49:20<14:38, 73.17s/it] 94%|█████████▍| 189/200 [3:50:33<13:24, 73.17s/it] 95%|█████████▌| 190/200 [3:51:46<12:11, 73.18s/it] 96%|█████████▌| 191/200 [3:52:59<10:58, 73.13s/it] 96%|█████████▌| 192/200 [3:54:13<09:44, 73.12s/it] 96%|█████████▋| 193/200 [3:55:26<08:32, 73.14s/it] 97%|█████████▋| 194/200 [3:56:39<07:19, 73.18s/it] 98%|█████████▊| 195/200 [3:57:52<06:05, 73.17s/it] 98%|█████████▊| 196/200 [3:59:05<04:52, 73.14s/it] 98%|█████████▊| 197/200 [4:00:18<03:39, 73.14s/it] 99%|█████████▉| 198/200 [4:01:32<02:26, 73.19s/it]100%|█████████▉| 199/200 [4:02:45<01:13, 73.23s/it][2021-10-10 23:40:36,397][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.059 (0.113)
[2021-10-10 23:40:36,922][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.030 (0.083)
[2021-10-10 23:40:36,998][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 78.160	Prec@5 95.110	            Loss 0.868	total_num=10000.0
[2021-10-10 23:40:37,000][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 78.16	top5 95.11
100%|██████████| 200/200 [4:04:01<00:00, 73.96s/it]100%|██████████| 200/200 [4:04:01<00:00, 73.21s/it]
[2021-10-10 23:40:38,628][bignas_cifar10_backdoor_solver.py][line: 119][    INFO] build backdoor test dataset with length of  20
[2021-10-10 23:40:40,065][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.094 (0.144)
[2021-10-10 23:40:40,749][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.061 (0.106)
[2021-10-10 23:40:40,830][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 98.100	Prec@5 100.000	            Loss 0.080	total_num=10000.0
[2021-10-10 23:40:40,832][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 98.1	top5 100.0
[2021-10-10 23:40:41,469][bignas_cifar10_backdoor_solver.py][line: 119][    INFO] build backdoor test dataset with length of  20
[2021-10-10 23:40:42,952][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.105 (0.148)
[2021-10-10 23:40:43,581][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.054 (0.106)
[2021-10-10 23:40:43,682][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 2.830	Prec@5 89.960	            Loss 15.726	total_num=10000.0
[2021-10-10 23:40:43,684][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 2.83	top5 89.96
[2021-10-10 23:40:43,684][bignas_cifar10_backdoor_solver.py][line: 240][    INFO] -------------------------After finetune subnet-------------------------
[2021-10-10 23:40:43,692][bignas_cifar10_backdoor_solver.py][line: 243][    INFO] Evaluate_subnet on BackDoor Target	{"flops": 555.469, "params": 11.21, "image_size": 32, "subnet_settings": {"kernel_size": [3, 3, 3, 3, 3], "out_channel": [64, 64, 128, 256, 512], "depth": [1, 2, 2, 2, 2]}, "top1": 98.1, "top5": 100.0}
[2021-10-10 23:40:43,692][bignas_cifar10_backdoor_solver.py][line: 247][    INFO] Evaluate_subnet on BackDoor Org	{"flops": 555.469, "params": 11.21, "image_size": 32, "subnet_settings": {"kernel_size": [3, 3, 3, 3, 3], "out_channel": [64, 64, 128, 256, 512], "depth": [1, 2, 2, 2, 2]}, "top1": 2.83, "top5": 89.96}
[2021-10-10 23:40:43,692][bignas_cifar10_backdoor_solver.py][line: 248][    INFO] ------------------------------------------------------------------------
