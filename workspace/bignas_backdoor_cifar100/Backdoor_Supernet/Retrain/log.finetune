Import metrics failed!
finetune_subnet
[2021-10-10 19:33:26,871][  cls_solver.py][line:  56][    INFO] config: {'bignas': {'data': {'image_size_list': [32],
                     'interpolation_type': 'bicubic',
                     'share_interpolation': False,
                     'stride': 8,
                     'test_image_size_list': [32]},
            'distiller': {'kwargs': {'T': 1},
                          's_name': ['classifier'],
                          't_name': ['classifier'],
                          'type': 'inplace_kd',
                          'weight': 1.0},
            'latency': {'hardware1': {'backend_name': 'hisvp-nnie11',
                                      'batch_size': 8,
                                      'data_type': 'int8',
                                      'hardware_name': '3559A',
                                      'test_latency': True},
                        'hardware2': {'backend_name': 'cuda11.0-trt7.1',
                                      'batch_size': 64,
                                      'data_type': 'int8',
                                      'hardware_name': 'T4',
                                      'test_latency': True},
                        'hardware3': {'backend_name': 'ppl2',
                                      'batch_size': 1,
                                      'data_type': 'fp32',
                                      'hardware_name': 'cpu',
                                      'test_latency': True}},
            'subnet': {'image_size': 32,
                       'save_subnet_weight': True,
                       'subnet_settings': {'depth': [1, 2, 2, 2, 2],
                                           'kernel_size': [3, 3, 3, 3, 3],
                                           'out_channel': [64,
                                                           64,
                                                           128,
                                                           256,
                                                           512]},
                       'test_subnet_latency': False},
            'train': {'sample_strategy': ['max', 'random', 'random', 'min'],
                      'sample_subnet_num': 4,
                      'valid_before_train': False}},
 'data': {'autoaugment': True,
          'batch_size': 512,
          'cutout': True,
          'input_size': 32,
          'num_workers': 4,
          'task': 'cifar100',
          'test': {'root': '/data/public/cifar'},
          'train': {'root': '/data/public/cifar'}},
 'dist': {'sync': False},
 'ema': {'enable': False, 'kwargs': {'decay': 0.999}},
 'lms': {'enable': False, 'kwargs': {'limit': 12}},
 'lr_scheduler': {'kwargs': {'base_lr': 0.2,
                             'max_epoch': 200,
                             'min_lr': 0.0,
                             'warmup_epoch': 0,
                             'warmup_lr': 0.2},
                  'type': 'CosineEpoch'},
 'model': {'kwargs': {'depth': {'sample_strategy': 'stage_wise_depth',
                                'space': {'max': [1, 2, 2, 3, 3],
                                          'min': [1, 1, 1, 1, 1],
                                          'stride': 1}},
                      'expand_ratio': [0, 1, 1, 1, 1],
                      'kernel_size': {'sample_strategy': 'stage_wise',
                                      'space': {'max': [7, 3, 3, 3, 3],
                                                'min': [3, 3, 3, 3, 3],
                                                'stride': 2}},
                      'num_classes': 100,
                      'out_channel': {'sample_strategy': 'stage_wise',
                                      'space': {'max': [64, 96, 160, 320, 640],
                                                'min': [32, 32, 64, 128, 256],
                                                'stride': [8, 8, 16, 16, 32]}},
                      'stride_stages': [1, 1, 2, 2, 2],
                      'use_maxpool': False,
                      'zero_last_gamma': True},
           'type': 'spring_big_resnet_basic'},
 'optimizer': {'dist': {'sync': False},
               'fp16_normal_bn': False,
               'kwargs': {'momentum': 0.9,
                          'nesterov': True,
                          'weight_decay': 0.0005},
               'type': 'SGD'},
 'saver': {'pretrain': {'path': '../checkpoints/ckpt.pth.tar'},
           'print_freq': 10,
           'save_many': False,
           'val_epoch_freq': 50,
           'val_freq': 5000},
 'seed_base': 304}
[2021-10-10 19:33:26,872][  cls_solver.py][line:  58][    INFO] hostnames: g0022
[2021-10-10 19:33:27,811][  cls_solver.py][line:  62][    INFO] Recovering from ../checkpoints/ckpt.pth.tar, keys=['last_iter', 'model', 'optimizer']
[2021-10-10 19:33:37,267][        misc.py][line: 146][    INFO] total param: 26.845M, conv: 26.764M, fc: 0.064M, others: 0.016M
[2021-10-10 19:33:37,341][        misc.py][line: 234][    INFO] total FLOPS: 1198.98M
[2021-10-10 19:33:37,341][        misc.py][line: 369][    INFO] ======= loading model state... =======
[2021-10-10 19:33:37,375][        misc.py][line: 326][    INFO] bn_w
[2021-10-10 19:33:37,375][        misc.py][line: 329][    INFO]    params: 25
[2021-10-10 19:33:37,375][        misc.py][line: 326][    INFO] bn_b
[2021-10-10 19:33:37,375][        misc.py][line: 329][    INFO]    params: 25
[2021-10-10 19:33:37,375][        misc.py][line: 326][    INFO] conv_b
[2021-10-10 19:33:37,375][        misc.py][line: 329][    INFO]    params: 0
[2021-10-10 19:33:37,375][        misc.py][line: 326][    INFO] linear_b
[2021-10-10 19:33:37,375][        misc.py][line: 329][    INFO]    params: 1
[2021-10-10 19:33:37,376][        misc.py][line: 383][    INFO] ======= loading optimizer state... =======
[2021-10-10 19:33:40,374][bignas_cifar10_base_solver.py][line:  98][    INFO] model network structure: Big_ResNet_Basic(
  (first_conv): DynamicConvBlock(
    (conv): DynamicConv2d(3, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
    (bn): DynamicBatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (act): ReLU(inplace=True)
  )
  (blocks): ModuleList(
    (0): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): DynamicConv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (shortcutbn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act2): ReLU(inplace=True)
    )
    (1): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (2): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(96, 160, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): DynamicConv2d(96, 160, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (shortcutbn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act2): ReLU(inplace=True)
    )
    (3): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (4): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(160, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): DynamicConv2d(160, 320, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (shortcutbn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act2): ReLU(inplace=True)
    )
    (5): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (6): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (7): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(320, 640, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): DynamicConv2d(320, 640, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (shortcutbn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act2): ReLU(inplace=True)
    )
    (8): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (9): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
  )
  (avg_pool): AdaptiveAvgPool2d(output_size=1)
  (classifier): DynamicLinearBlock(
    (linear): DynamicLinear(in_features=640, out_features=100, bias=True)
  )
)
{'name': 'spring.nas.bignas'}
{'name': 'spring.distiller.mimicker'}
{'name': 'spring.distiller.mimicjob', 'mimic_name': 'job1', 'mimic_type': 'kd'}
[2021-10-10 19:33:41,981][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.056 (0.160)
[2021-10-10 19:33:42,491][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.029 (0.106)
[2021-10-10 19:33:42,545][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 77.160	Prec@5 94.550	            Loss 1.056	total_num=10000.0
[2021-10-10 19:33:42,546][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 77.16	top5 94.55
[2021-10-10 19:33:42,552][cls_controller.py][line: 113][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3], 'out_channel': [64, 64, 128, 256, 512], 'depth': [1, 2, 2, 2, 2]}	image_size (1, 3, 32, 32)	flops 555.469	params 11.21
[2021-10-10 19:33:42,554][bignas_cifar10_base_solver.py][line: 572][    INFO] Before finetune subnet {"flops": 555.469, "params": 11.21, "image_size": 32, "subnet_settings": {"kernel_size": [3, 3, 3, 3, 3], "out_channel": [64, 64, 128, 256, 512], "depth": [1, 2, 2, 2, 2]}, "top1": 77.16, "top5": 94.55}
[2021-10-10 19:33:42,555][bignas_cifar10_base_solver.py][line: 530][    INFO] build subnet finetune training dataset with image size 32 max_iter 19600
  0%|          | 0/200 [00:00<?, ?it/s]  0%|          | 1/200 [01:11<3:56:46, 71.39s/it]  1%|          | 2/200 [02:23<3:56:19, 71.62s/it]  2%|▏         | 3/200 [03:35<3:56:17, 71.97s/it]  2%|▏         | 4/200 [04:48<3:55:55, 72.22s/it]  2%|▎         | 5/200 [06:00<3:54:45, 72.23s/it]  3%|▎         | 6/200 [07:12<3:53:36, 72.25s/it]  4%|▎         | 7/200 [08:24<3:52:27, 72.26s/it]  4%|▍         | 8/200 [09:37<3:51:20, 72.29s/it]  4%|▍         | 9/200 [10:49<3:49:58, 72.24s/it]  5%|▌         | 10/200 [12:01<3:48:43, 72.23s/it]  6%|▌         | 11/200 [13:13<3:47:28, 72.22s/it]  6%|▌         | 12/200 [14:25<3:46:05, 72.16s/it]  6%|▋         | 13/200 [15:37<3:44:49, 72.14s/it]  7%|▋         | 14/200 [16:50<3:43:48, 72.19s/it]  8%|▊         | 15/200 [18:02<3:42:39, 72.21s/it]  8%|▊         | 16/200 [19:14<3:41:21, 72.18s/it]  8%|▊         | 17/200 [20:27<3:40:18, 72.23s/it]  9%|▉         | 18/200 [21:39<3:39:09, 72.25s/it] 10%|▉         | 19/200 [22:51<3:37:50, 72.21s/it] 10%|█         | 20/200 [24:03<3:36:24, 72.14s/it] 10%|█         | 21/200 [25:15<3:35:07, 72.11s/it] 11%|█         | 22/200 [26:27<3:33:45, 72.05s/it] 12%|█▏        | 23/200 [27:39<3:32:33, 72.06s/it] 12%|█▏        | 24/200 [28:51<3:31:25, 72.08s/it] 12%|█▎        | 25/200 [30:03<3:30:02, 72.02s/it] 13%|█▎        | 26/200 [31:15<3:28:52, 72.03s/it] 14%|█▎        | 27/200 [32:27<3:27:53, 72.10s/it] 14%|█▍        | 28/200 [33:39<3:26:33, 72.05s/it] 14%|█▍        | 29/200 [34:51<3:25:14, 72.01s/it] 15%|█▌        | 30/200 [36:03<3:23:58, 71.99s/it] 16%|█▌        | 31/200 [37:15<3:22:42, 71.97s/it] 16%|█▌        | 32/200 [38:27<3:21:28, 71.96s/it] 16%|█▋        | 33/200 [39:39<3:20:27, 72.02s/it] 17%|█▋        | 34/200 [40:51<3:19:21, 72.06s/it] 18%|█▊        | 35/200 [42:03<3:18:01, 72.01s/it] 18%|█▊        | 36/200 [43:15<3:16:47, 72.00s/it] 18%|█▊        | 37/200 [44:27<3:15:40, 72.03s/it] 19%|█▉        | 38/200 [45:39<3:14:37, 72.08s/it] 20%|█▉        | 39/200 [46:51<3:13:14, 72.02s/it] 20%|██        | 40/200 [48:03<3:12:01, 72.01s/it] 20%|██        | 41/200 [49:15<3:10:54, 72.04s/it] 21%|██        | 42/200 [50:27<3:09:33, 71.99s/it] 22%|██▏       | 43/200 [51:39<3:08:21, 71.99s/it] 22%|██▏       | 44/200 [52:51<3:07:09, 71.98s/it] 22%|██▎       | 45/200 [54:03<3:05:48, 71.92s/it] 23%|██▎       | 46/200 [55:15<3:04:33, 71.91s/it] 24%|██▎       | 47/200 [56:27<3:03:21, 71.91s/it] 24%|██▍       | 48/200 [57:39<3:02:18, 71.97s/it] 24%|██▍       | 49/200 [58:51<3:01:04, 71.95s/it][2021-10-10 20:33:47,747][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.057 (0.100)
[2021-10-10 20:33:48,265][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.030 (0.076)
[2021-10-10 20:33:48,325][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 59.780	Prec@5 85.930	            Loss 1.510	total_num=10000.0
[2021-10-10 20:33:48,326][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 59.78	top5 85.93
 25%|██▌       | 50/200 [1:00:05<3:01:27, 72.58s/it] 26%|██▌       | 51/200 [1:01:17<2:59:45, 72.39s/it] 26%|██▌       | 52/200 [1:02:29<2:58:21, 72.30s/it] 26%|██▋       | 53/200 [1:03:41<2:57:00, 72.25s/it] 27%|██▋       | 54/200 [1:04:53<2:55:51, 72.27s/it] 28%|██▊       | 55/200 [1:06:06<2:54:36, 72.25s/it] 28%|██▊       | 56/200 [1:07:18<2:53:16, 72.20s/it] 28%|██▊       | 57/200 [1:08:30<2:51:56, 72.14s/it] 29%|██▉       | 58/200 [1:09:42<2:50:34, 72.08s/it] 30%|██▉       | 59/200 [1:10:54<2:49:26, 72.10s/it] 30%|███       | 60/200 [1:12:06<2:48:09, 72.07s/it] 30%|███       | 61/200 [1:13:18<2:46:55, 72.06s/it] 31%|███       | 62/200 [1:14:30<2:45:37, 72.01s/it] 32%|███▏      | 63/200 [1:15:42<2:44:25, 72.01s/it] 32%|███▏      | 64/200 [1:16:53<2:43:05, 71.95s/it] 32%|███▎      | 65/200 [1:18:05<2:41:57, 71.98s/it] 33%|███▎      | 66/200 [1:19:17<2:40:37, 71.92s/it] 34%|███▎      | 67/200 [1:20:29<2:39:21, 71.89s/it] 34%|███▍      | 68/200 [1:21:41<2:38:08, 71.88s/it] 34%|███▍      | 69/200 [1:22:53<2:37:00, 71.91s/it] 35%|███▌      | 70/200 [1:24:05<2:35:50, 71.92s/it] 36%|███▌      | 71/200 [1:25:17<2:34:33, 71.88s/it] 36%|███▌      | 72/200 [1:26:29<2:33:21, 71.89s/it] 36%|███▋      | 73/200 [1:27:40<2:32:10, 71.89s/it] 37%|███▋      | 74/200 [1:28:52<2:30:56, 71.88s/it] 38%|███▊      | 75/200 [1:30:04<2:29:41, 71.85s/it] 38%|███▊      | 76/200 [1:31:16<2:28:33, 71.88s/it] 38%|███▊      | 77/200 [1:32:28<2:27:30, 71.95s/it] 39%|███▉      | 78/200 [1:33:40<2:26:12, 71.91s/it] 40%|███▉      | 79/200 [1:34:52<2:24:57, 71.88s/it] 40%|████      | 80/200 [1:36:04<2:23:44, 71.87s/it] 40%|████      | 81/200 [1:37:16<2:22:32, 71.87s/it] 41%|████      | 82/200 [1:38:27<2:21:17, 71.85s/it] 42%|████▏     | 83/200 [1:39:39<2:20:05, 71.85s/it] 42%|████▏     | 84/200 [1:40:51<2:18:50, 71.81s/it] 42%|████▎     | 85/200 [1:42:03<2:17:35, 71.79s/it] 43%|████▎     | 86/200 [1:43:15<2:16:29, 71.84s/it] 44%|████▎     | 87/200 [1:44:27<2:15:24, 71.90s/it] 44%|████▍     | 88/200 [1:45:39<2:14:22, 71.98s/it] 44%|████▍     | 89/200 [1:46:51<2:13:08, 71.97s/it] 45%|████▌     | 90/200 [1:48:03<2:11:51, 71.93s/it] 46%|████▌     | 91/200 [1:49:14<2:10:40, 71.93s/it] 46%|████▌     | 92/200 [1:50:27<2:09:31, 71.96s/it] 46%|████▋     | 93/200 [1:51:39<2:08:22, 71.99s/it] 47%|████▋     | 94/200 [1:52:50<2:07:05, 71.94s/it] 48%|████▊     | 95/200 [1:54:02<2:05:49, 71.90s/it] 48%|████▊     | 96/200 [1:55:14<2:04:37, 71.90s/it] 48%|████▊     | 97/200 [1:56:26<2:03:28, 71.93s/it] 49%|████▉     | 98/200 [1:57:38<2:02:10, 71.86s/it] 50%|████▉     | 99/200 [1:58:50<2:00:57, 71.86s/it][2021-10-10 21:33:46,689][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.057 (0.111)
[2021-10-10 21:33:47,216][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.030 (0.082)
[2021-10-10 21:33:47,286][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 67.380	Prec@5 90.740	            Loss 1.220	total_num=10000.0
[2021-10-10 21:33:47,287][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 67.38	top5 90.74
 50%|█████     | 100/200 [2:00:04<2:00:59, 72.60s/it] 50%|█████     | 101/200 [2:01:16<1:59:25, 72.37s/it] 51%|█████     | 102/200 [2:02:28<1:57:56, 72.21s/it] 52%|█████▏    | 103/200 [2:03:40<1:56:37, 72.14s/it] 52%|█████▏    | 104/200 [2:04:51<1:55:14, 72.03s/it] 52%|█████▎    | 105/200 [2:06:03<1:53:58, 71.98s/it] 53%|█████▎    | 106/200 [2:07:15<1:52:38, 71.89s/it] 54%|█████▎    | 107/200 [2:08:27<1:51:24, 71.88s/it] 54%|█████▍    | 108/200 [2:09:39<1:50:12, 71.87s/it] 55%|█████▍    | 109/200 [2:10:51<1:49:06, 71.94s/it] 55%|█████▌    | 110/200 [2:12:03<1:47:57, 71.98s/it] 56%|█████▌    | 111/200 [2:13:15<1:46:47, 72.00s/it] 56%|█████▌    | 112/200 [2:14:27<1:45:34, 71.98s/it] 56%|█████▋    | 113/200 [2:15:39<1:44:21, 71.97s/it] 57%|█████▋    | 114/200 [2:16:51<1:43:05, 71.92s/it] 57%|█████▊    | 115/200 [2:18:03<1:41:53, 71.93s/it] 58%|█████▊    | 116/200 [2:19:15<1:40:46, 71.98s/it] 58%|█████▊    | 117/200 [2:20:27<1:39:33, 71.97s/it] 59%|█████▉    | 118/200 [2:21:39<1:38:21, 71.97s/it] 60%|█████▉    | 119/200 [2:22:51<1:37:09, 71.97s/it] 60%|██████    | 120/200 [2:24:02<1:35:54, 71.93s/it] 60%|██████    | 121/200 [2:25:14<1:34:43, 71.94s/it] 61%|██████    | 122/200 [2:26:26<1:33:28, 71.91s/it] 62%|██████▏   | 123/200 [2:27:38<1:32:13, 71.86s/it] 62%|██████▏   | 124/200 [2:28:50<1:31:00, 71.85s/it] 62%|██████▎   | 125/200 [2:30:02<1:29:48, 71.85s/it] 63%|██████▎   | 126/200 [2:31:13<1:28:36, 71.85s/it] 64%|██████▎   | 127/200 [2:32:26<1:27:31, 71.93s/it] 64%|██████▍   | 128/200 [2:33:38<1:26:22, 71.98s/it] 64%|██████▍   | 129/200 [2:34:50<1:25:11, 71.99s/it] 65%|██████▌   | 130/200 [2:36:01<1:23:56, 71.95s/it] 66%|██████▌   | 131/200 [2:37:13<1:22:41, 71.90s/it] 66%|██████▌   | 132/200 [2:38:25<1:21:32, 71.94s/it] 66%|██████▋   | 133/200 [2:39:37<1:20:15, 71.88s/it] 67%|██████▋   | 134/200 [2:40:49<1:19:03, 71.88s/it] 68%|██████▊   | 135/200 [2:42:01<1:17:50, 71.85s/it] 68%|██████▊   | 136/200 [2:43:13<1:16:38, 71.85s/it] 68%|██████▊   | 137/200 [2:44:24<1:15:25, 71.83s/it] 69%|██████▉   | 138/200 [2:45:36<1:14:13, 71.83s/it] 70%|██████▉   | 139/200 [2:46:48<1:13:05, 71.89s/it] 70%|███████   | 140/200 [2:48:00<1:11:52, 71.88s/it] 70%|███████   | 141/200 [2:49:12<1:10:43, 71.92s/it] 71%|███████   | 142/200 [2:50:24<1:09:29, 71.89s/it] 72%|███████▏  | 143/200 [2:51:36<1:08:17, 71.88s/it] 72%|███████▏  | 144/200 [2:52:48<1:07:06, 71.89s/it] 72%|███████▎  | 145/200 [2:54:00<1:05:53, 71.87s/it] 73%|███████▎  | 146/200 [2:55:11<1:04:41, 71.88s/it] 74%|███████▎  | 147/200 [2:56:23<1:03:28, 71.85s/it] 74%|███████▍  | 148/200 [2:57:35<1:02:16, 71.86s/it] 74%|███████▍  | 149/200 [2:58:47<1:01:04, 71.85s/it][2021-10-10 22:33:43,743][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.078 (0.103)
[2021-10-10 22:33:44,317][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.029 (0.080)
[2021-10-10 22:33:44,374][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 72.730	Prec@5 92.610	            Loss 1.089	total_num=10000.0
[2021-10-10 22:33:44,375][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 72.73	top5 92.61
 75%|███████▌  | 150/200 [3:00:01<1:00:25, 72.51s/it] 76%|███████▌  | 151/200 [3:01:13<59:02, 72.29s/it]   76%|███████▌  | 152/200 [3:02:25<57:45, 72.20s/it] 76%|███████▋  | 153/200 [3:03:37<56:31, 72.15s/it] 77%|███████▋  | 154/200 [3:04:49<55:15, 72.08s/it] 78%|███████▊  | 155/200 [3:06:01<54:02, 72.06s/it] 78%|███████▊  | 156/200 [3:07:12<52:47, 71.98s/it] 78%|███████▊  | 157/200 [3:08:24<51:32, 71.93s/it] 79%|███████▉  | 158/200 [3:09:36<50:19, 71.90s/it] 80%|███████▉  | 159/200 [3:10:48<49:06, 71.86s/it] 80%|████████  | 160/200 [3:12:00<47:56, 71.91s/it] 80%|████████  | 161/200 [3:13:12<46:46, 71.96s/it] 81%|████████  | 162/200 [3:14:24<45:33, 71.93s/it] 82%|████████▏ | 163/200 [3:15:36<44:20, 71.92s/it] 82%|████████▏ | 164/200 [3:16:48<43:08, 71.89s/it] 82%|████████▎ | 165/200 [3:18:00<41:57, 71.92s/it] 83%|████████▎ | 166/200 [3:19:11<40:44, 71.89s/it] 84%|████████▎ | 167/200 [3:20:23<39:32, 71.88s/it] 84%|████████▍ | 168/200 [3:21:35<38:21, 71.93s/it] 84%|████████▍ | 169/200 [3:22:47<37:09, 71.91s/it] 85%|████████▌ | 170/200 [3:23:59<36:00, 72.01s/it] 86%|████████▌ | 171/200 [3:25:11<34:47, 71.97s/it] 86%|████████▌ | 172/200 [3:26:23<33:34, 71.93s/it] 86%|████████▋ | 173/200 [3:27:35<32:21, 71.92s/it] 87%|████████▋ | 174/200 [3:28:47<31:11, 71.96s/it] 88%|████████▊ | 175/200 [3:29:59<29:59, 71.98s/it] 88%|████████▊ | 176/200 [3:31:11<28:46, 71.95s/it] 88%|████████▊ | 177/200 [3:32:23<27:34, 71.93s/it] 89%|████████▉ | 178/200 [3:33:35<26:23, 71.98s/it] 90%|████████▉ | 179/200 [3:34:47<25:11, 72.00s/it] 90%|█████████ | 180/200 [3:35:59<24:01, 72.05s/it] 90%|█████████ | 181/200 [3:37:11<22:47, 71.98s/it] 91%|█████████ | 182/200 [3:38:23<21:35, 71.99s/it] 92%|█████████▏| 183/200 [3:39:35<20:24, 72.02s/it] 92%|█████████▏| 184/200 [3:40:47<19:11, 71.94s/it] 92%|█████████▎| 185/200 [3:41:59<17:58, 71.90s/it] 93%|█████████▎| 186/200 [3:43:10<16:46, 71.86s/it] 94%|█████████▎| 187/200 [3:44:22<15:33, 71.84s/it] 94%|█████████▍| 188/200 [3:45:34<14:22, 71.83s/it] 94%|█████████▍| 189/200 [3:46:46<13:10, 71.83s/it] 95%|█████████▌| 190/200 [3:47:58<11:59, 71.90s/it] 96%|█████████▌| 191/200 [3:49:10<10:46, 71.87s/it] 96%|█████████▌| 192/200 [3:50:22<09:34, 71.86s/it] 96%|█████████▋| 193/200 [3:51:34<08:23, 71.93s/it] 97%|█████████▋| 194/200 [3:52:46<07:11, 71.99s/it] 98%|█████████▊| 195/200 [3:53:58<05:59, 71.94s/it] 98%|█████████▊| 196/200 [3:55:10<04:47, 72.00s/it] 98%|█████████▊| 197/200 [3:56:22<03:36, 72.00s/it] 99%|█████████▉| 198/200 [3:57:34<02:24, 72.00s/it]100%|█████████▉| 199/200 [3:58:46<01:11, 71.95s/it][2021-10-10 23:33:42,355][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.057 (0.098)
[2021-10-10 23:33:42,873][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.030 (0.075)
[2021-10-10 23:33:42,936][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 76.860	Prec@5 94.200	            Loss 0.962	total_num=10000.0
[2021-10-10 23:33:42,936][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 76.86	top5 94.2
100%|██████████| 200/200 [4:00:00<00:00, 72.58s/it]100%|██████████| 200/200 [4:00:00<00:00, 72.00s/it]
[2021-10-10 23:33:44,520][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.056 (0.095)
[2021-10-10 23:33:45,035][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.029 (0.073)
[2021-10-10 23:33:45,092][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 76.860	Prec@5 94.200	            Loss 0.962	total_num=10000.0
[2021-10-10 23:33:45,093][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 76.86	top5 94.2
[2021-10-10 23:33:45,099][bignas_cifar10_base_solver.py][line: 583][    INFO] After finetune subnet {"flops": 555.469, "params": 11.21, "image_size": 32, "subnet_settings": {"kernel_size": [3, 3, 3, 3, 3], "out_channel": [64, 64, 128, 256, 512], "depth": [1, 2, 2, 2, 2]}, "top1": 76.86, "top5": 94.2}
