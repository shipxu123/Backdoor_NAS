Import metrics failed!
finetune_subnet
[2021-10-10 10:09:51,956][  cls_solver.py][line:  56][    INFO] config: {'bignas': {'data': {'image_size_list': [32],
                     'interpolation_type': 'bicubic',
                     'share_interpolation': False,
                     'stride': 8,
                     'test_image_size_list': [32]},
            'distiller': {'kwargs': {'T': 1},
                          's_name': ['classifier'],
                          't_name': ['classifier'],
                          'type': 'inplace_kd',
                          'weight': 1.0},
            'subnet': {'image_size': 32,
                       'save_subnet_weight': True,
                       'subnet_settings': {'depth': [1, 2, 2, 2, 2],
                                           'kernel_size': [3, 3, 3, 3, 3],
                                           'out_channel': [64,
                                                           64,
                                                           128,
                                                           256,
                                                           512]},
                       'test_subnet_latency': False},
            'train': {'sample_strategy': ['max', 'random', 'random', 'min'],
                      'sample_subnet_num': 4,
                      'valid_before_train': False}},
 'data': {'autoaugment': True,
          'batch_size': 512,
          'cutout': True,
          'input_size': 32,
          'num_workers': 4,
          'task': 'cifar100',
          'test': {'root': '/data/public/cifar'},
          'train': {'root': '/data/public/cifar'}},
 'dist': {'sync': False},
 'ema': {'enable': False, 'kwargs': {'decay': 0.999}},
 'lms': {'enable': False, 'kwargs': {'limit': 12}},
 'lr_scheduler': {'kwargs': {'base_lr': 0.02,
                             'max_epoch': 20,
                             'min_lr': 0.0,
                             'warmup_epoch': 0,
                             'warmup_lr': 0.02},
                  'type': 'CosineEpoch'},
 'model': {'kwargs': {'depth': {'sample_strategy': 'stage_wise_depth',
                                'space': {'max': [1, 2, 2, 3, 3],
                                          'min': [1, 1, 1, 1, 1],
                                          'stride': 1}},
                      'expand_ratio': [0, 1, 1, 1, 1],
                      'kernel_size': {'sample_strategy': 'stage_wise',
                                      'space': {'max': [7, 3, 3, 3, 3],
                                                'min': [3, 3, 3, 3, 3],
                                                'stride': 2}},
                      'num_classes': 100,
                      'out_channel': {'sample_strategy': 'stage_wise',
                                      'space': {'max': [64, 96, 160, 320, 640],
                                                'min': [32, 32, 64, 128, 256],
                                                'stride': [8, 8, 16, 16, 32]}},
                      'stride_stages': [1, 1, 2, 2, 2],
                      'use_maxpool': False,
                      'zero_last_gamma': True},
           'type': 'spring_big_resnet_basic'},
 'optimizer': {'dist': {'sync': False},
               'fp16_normal_bn': False,
               'kwargs': {'momentum': 0.9,
                          'nesterov': True,
                          'weight_decay': 0.0005},
               'type': 'SGD'},
 'saver': {'pretrain': {'path': '../checkpoints/ckpt.pth.tar'},
           'print_freq': 10,
           'save_many': False,
           'val_epoch_freq': 1,
           'val_freq': 5000},
 'seed_base': 304}
[2021-10-10 10:09:51,958][  cls_solver.py][line:  58][    INFO] hostnames: g0020
[2021-10-10 10:09:52,185][  cls_solver.py][line:  62][    INFO] Recovering from ../checkpoints/ckpt.pth.tar, keys=['last_iter', 'model', 'optimizer']
[2021-10-10 10:09:56,714][        misc.py][line: 146][    INFO] total param: 26.845M, conv: 26.764M, fc: 0.064M, others: 0.016M
[2021-10-10 10:09:56,734][        misc.py][line: 234][    INFO] total FLOPS: 1198.98M
[2021-10-10 10:09:56,734][        misc.py][line: 369][    INFO] ======= loading model state... =======
[2021-10-10 10:09:56,767][        misc.py][line: 326][    INFO] bn_w
[2021-10-10 10:09:56,767][        misc.py][line: 329][    INFO]    params: 25
[2021-10-10 10:09:56,767][        misc.py][line: 326][    INFO] bn_b
[2021-10-10 10:09:56,767][        misc.py][line: 329][    INFO]    params: 25
[2021-10-10 10:09:56,767][        misc.py][line: 326][    INFO] conv_b
[2021-10-10 10:09:56,767][        misc.py][line: 329][    INFO]    params: 0
[2021-10-10 10:09:56,767][        misc.py][line: 326][    INFO] linear_b
[2021-10-10 10:09:56,767][        misc.py][line: 329][    INFO]    params: 1
[2021-10-10 10:09:56,768][        misc.py][line: 383][    INFO] ======= loading optimizer state... =======
[2021-10-10 10:09:58,630][bignas_cifar10_base_solver.py][line:  98][    INFO] model network structure: Big_ResNet_Basic(
  (first_conv): DynamicConvBlock(
    (conv): DynamicConv2d(3, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
    (bn): DynamicBatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (act): ReLU(inplace=True)
  )
  (blocks): ModuleList(
    (0): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): DynamicConv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (shortcutbn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act2): ReLU(inplace=True)
    )
    (1): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (2): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(96, 160, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): DynamicConv2d(96, 160, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (shortcutbn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act2): ReLU(inplace=True)
    )
    (3): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (4): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(160, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): DynamicConv2d(160, 320, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (shortcutbn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act2): ReLU(inplace=True)
    )
    (5): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (6): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (7): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(320, 640, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): DynamicConv2d(320, 640, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (shortcutbn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act2): ReLU(inplace=True)
    )
    (8): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
    (9): DynamicBasicBlock(
      (normal_conv1): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): ReLU(inplace=True)
      )
      (normal_conv2): Sequential(
        (conv): DynamicConv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): DynamicBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (shortcut): Identity()
      (act2): ReLU(inplace=True)
    )
  )
  (avg_pool): AdaptiveAvgPool2d(output_size=1)
  (classifier): DynamicLinearBlock(
    (linear): DynamicLinear(in_features=640, out_features=100, bias=True)
  )
)
{'name': 'spring.nas.bignas'}
{'name': 'spring.distiller.mimicker'}
{'name': 'spring.distiller.mimicjob', 'mimic_name': 'job1', 'mimic_type': 'kd'}
[2021-10-10 10:10:00,074][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.063 (0.144)
[2021-10-10 10:10:00,594][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.029 (0.098)
[2021-10-10 10:10:00,635][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 77.160	Prec@5 94.550	            Loss 1.056	total_num=10000.0
[2021-10-10 10:10:00,636][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 77.16	top5 94.55
[2021-10-10 10:10:00,642][cls_controller.py][line: 113][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3], 'out_channel': [64, 64, 128, 256, 512], 'depth': [1, 2, 2, 2, 2]}	image_size (1, 3, 32, 32)	flops 555.469	params 11.21
[2021-10-10 10:10:00,642][bignas_cifar10_base_solver.py][line: 572][    INFO] Before finetune subnet {"flops": 555.469, "params": 11.21, "image_size": 32, "subnet_settings": {"kernel_size": [3, 3, 3, 3, 3], "out_channel": [64, 64, 128, 256, 512], "depth": [1, 2, 2, 2, 2]}, "top1": 77.16, "top5": 94.55}
[2021-10-10 10:10:00,642][bignas_cifar10_base_solver.py][line: 530][    INFO] build subnet finetune training dataset with image size 32 max_iter 1960
  0%|          | 0/20 [00:00<?, ?it/s][2021-10-10 10:11:14,194][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.057 (0.088)
[2021-10-10 10:11:14,709][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.029 (0.070)
[2021-10-10 10:11:14,750][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 74.580	Prec@5 93.610	            Loss 1.110	total_num=10000.0
[2021-10-10 10:11:14,751][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 74.58	top5 93.61
  5%|▌         | 1/20 [01:13<23:23, 73.85s/it][2021-10-10 10:12:28,725][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.058 (0.089)
[2021-10-10 10:12:29,241][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.029 (0.070)
[2021-10-10 10:12:29,283][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 74.190	Prec@5 93.370	            Loss 1.152	total_num=10000.0
[2021-10-10 10:12:29,284][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 74.19	top5 93.37
 10%|█         | 2/20 [02:28<22:17, 74.30s/it][2021-10-10 10:13:43,379][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.058 (0.090)
[2021-10-10 10:13:43,901][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.030 (0.071)
[2021-10-10 10:13:43,942][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 74.390	Prec@5 93.720	            Loss 1.090	total_num=10000.0
[2021-10-10 10:13:43,943][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 74.39	top5 93.72
 15%|█▌        | 3/20 [03:43<21:05, 74.46s/it][2021-10-10 10:14:57,963][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.056 (0.095)
[2021-10-10 10:14:58,477][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.029 (0.073)
[2021-10-10 10:14:58,519][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 75.170	Prec@5 94.110	            Loss 1.012	total_num=10000.0
[2021-10-10 10:14:58,520][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 75.17	top5 94.11
 20%|██        | 4/20 [04:57<19:52, 74.51s/it][2021-10-10 10:16:12,420][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.057 (0.088)
[2021-10-10 10:16:12,937][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.030 (0.070)
[2021-10-10 10:16:12,977][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 75.470	Prec@5 94.210	            Loss 1.010	total_num=10000.0
[2021-10-10 10:16:12,978][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 75.47	top5 94.21
 25%|██▌       | 5/20 [06:12<18:37, 74.49s/it][2021-10-10 10:17:26,928][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.056 (0.089)
[2021-10-10 10:17:27,444][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.030 (0.070)
[2021-10-10 10:17:27,484][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 75.270	Prec@5 94.010	            Loss 1.013	total_num=10000.0
[2021-10-10 10:17:27,485][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 75.27	top5 94.01
 30%|███       | 6/20 [07:26<17:22, 74.49s/it][2021-10-10 10:18:41,371][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.058 (0.088)
[2021-10-10 10:18:41,887][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.029 (0.070)
[2021-10-10 10:18:41,928][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 76.030	Prec@5 94.240	            Loss 0.988	total_num=10000.0
[2021-10-10 10:18:41,929][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 76.03	top5 94.24
 35%|███▌      | 7/20 [08:41<16:08, 74.48s/it][2021-10-10 10:19:55,874][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.057 (0.087)
[2021-10-10 10:19:56,391][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.030 (0.070)
[2021-10-10 10:19:56,431][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 76.260	Prec@5 94.020	            Loss 1.023	total_num=10000.0
[2021-10-10 10:19:56,432][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 76.26	top5 94.02
 40%|████      | 8/20 [09:55<14:53, 74.49s/it][2021-10-10 10:21:10,509][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.057 (0.092)
[2021-10-10 10:21:11,025][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.030 (0.072)
[2021-10-10 10:21:11,067][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 76.300	Prec@5 94.240	            Loss 1.001	total_num=10000.0
[2021-10-10 10:21:11,067][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 76.3	top5 94.24
 45%|████▌     | 9/20 [11:10<13:40, 74.58s/it][2021-10-10 10:22:25,201][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.057 (0.089)
[2021-10-10 10:22:25,719][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.030 (0.070)
[2021-10-10 10:22:25,759][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 76.890	Prec@5 94.430	            Loss 0.952	total_num=10000.0
[2021-10-10 10:22:25,760][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 76.89	top5 94.43
 50%|█████     | 10/20 [12:24<12:25, 74.57s/it][2021-10-10 10:23:39,748][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.057 (0.090)
[2021-10-10 10:23:40,266][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.029 (0.071)
[2021-10-10 10:23:40,308][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 76.770	Prec@5 94.510	            Loss 0.969	total_num=10000.0
[2021-10-10 10:23:40,309][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 76.77	top5 94.51
 55%|█████▌    | 11/20 [13:39<11:11, 74.56s/it][2021-10-10 10:24:54,216][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.057 (0.088)
[2021-10-10 10:24:54,731][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.030 (0.070)
[2021-10-10 10:24:54,771][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 77.010	Prec@5 94.500	            Loss 0.941	total_num=10000.0
[2021-10-10 10:24:54,772][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 77.01	top5 94.5
 60%|██████    | 12/20 [14:53<09:56, 74.53s/it][2021-10-10 10:26:08,820][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.060 (0.092)
[2021-10-10 10:26:09,342][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.030 (0.072)
[2021-10-10 10:26:09,383][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 77.230	Prec@5 94.850	            Loss 0.939	total_num=10000.0
[2021-10-10 10:26:09,384][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 77.23	top5 94.85
 65%|██████▌   | 13/20 [16:08<08:41, 74.56s/it][2021-10-10 10:27:23,358][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.057 (0.090)
[2021-10-10 10:27:23,875][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.030 (0.071)
[2021-10-10 10:27:23,916][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 77.500	Prec@5 94.860	            Loss 0.933	total_num=10000.0
[2021-10-10 10:27:23,917][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 77.5	top5 94.86
 70%|███████   | 14/20 [17:23<07:27, 74.55s/it][2021-10-10 10:28:38,114][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.057 (0.089)
[2021-10-10 10:28:38,632][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.030 (0.070)
[2021-10-10 10:28:38,673][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 77.740	Prec@5 94.700	            Loss 0.920	total_num=10000.0
[2021-10-10 10:28:38,674][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 77.74	top5 94.7
 75%|███████▌  | 15/20 [18:37<06:13, 74.61s/it][2021-10-10 10:29:52,730][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.057 (0.088)
[2021-10-10 10:29:53,246][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.030 (0.070)
[2021-10-10 10:29:53,286][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 77.960	Prec@5 95.040	            Loss 0.909	total_num=10000.0
[2021-10-10 10:29:53,287][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 77.96	top5 95.04
 80%|████████  | 16/20 [19:52<04:58, 74.61s/it][2021-10-10 10:31:07,877][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.056 (0.094)
[2021-10-10 10:31:08,397][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.030 (0.073)
[2021-10-10 10:31:08,441][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 78.360	Prec@5 94.920	            Loss 0.898	total_num=10000.0
[2021-10-10 10:31:08,445][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 78.36	top5 94.92
 85%|████████▌ | 17/20 [21:07<03:44, 74.83s/it][2021-10-10 10:32:22,841][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.057 (0.095)
[2021-10-10 10:32:23,356][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.030 (0.073)
[2021-10-10 10:32:23,401][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 78.340	Prec@5 94.850	            Loss 0.901	total_num=10000.0
[2021-10-10 10:32:23,402][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 78.34	top5 94.85
 90%|█████████ | 18/20 [22:22<02:29, 74.82s/it][2021-10-10 10:33:37,398][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.057 (0.087)
[2021-10-10 10:33:37,915][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.030 (0.069)
[2021-10-10 10:33:37,955][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 78.330	Prec@5 94.910	            Loss 0.903	total_num=10000.0
[2021-10-10 10:33:37,956][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 78.33	top5 94.91
 95%|█████████▌| 19/20 [23:37<01:14, 74.74s/it][2021-10-10 10:34:52,185][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.057 (0.088)
[2021-10-10 10:34:52,703][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.030 (0.070)
[2021-10-10 10:34:52,744][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 78.380	Prec@5 95.030	            Loss 0.900	total_num=10000.0
[2021-10-10 10:34:52,745][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 78.38	top5 95.03
100%|██████████| 20/20 [24:51<00:00, 74.76s/it]100%|██████████| 20/20 [24:51<00:00, 74.60s/it]
[2021-10-10 10:34:54,142][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [10/20]	Time 0.057 (0.088)
[2021-10-10 10:34:54,659][bignas_cifar10_base_solver.py][line: 455][    INFO] Test: [20/20]	Time 0.030 (0.070)
[2021-10-10 10:34:54,698][bignas_cifar10_base_solver.py][line: 468][    INFO]  * Prec@1 78.380	Prec@5 95.030	            Loss 0.900	total_num=10000.0
[2021-10-10 10:34:54,699][bignas_cifar10_base_solver.py][line: 488][    INFO] Subnet with settings: {'kernel_size': [3, 3, 3, 3, 3, 3, 3, 3, 3], 'out_channel': [64, 64, 64, 128, 128, 256, 256, 512, 512], 'depth': [1, 2, 2, 2, 2]}	top1 78.38	top5 95.03
[2021-10-10 10:34:54,704][bignas_cifar10_base_solver.py][line: 583][    INFO] After finetune subnet {"flops": 555.469, "params": 11.21, "image_size": 32, "subnet_settings": {"kernel_size": [3, 3, 3, 3, 3], "out_channel": [64, 64, 128, 256, 512], "depth": [1, 2, 2, 2, 2]}, "top1": 78.38, "top5": 95.03}
